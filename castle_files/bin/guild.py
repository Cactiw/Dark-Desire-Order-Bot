"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–ª—å–¥–∏—è–º–∏ –∫–∞–∫ —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ
–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≥–∏–ª—å–¥–∏—è–º–∏, –∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –Ω–∏—Ö
"""
from castle_files.libs.guild import Guild
from castle_files.libs.player import Player
from castle_files.libs.bot_async_messaging import MAX_MESSAGE_LENGTH

from castle_files.bin.buttons import get_edit_guild_buttons, get_general_buttons, get_view_guild_buttons

from telegram.error import TelegramError

from castle_files.work_materials.globals import dispatcher, cursor, conn
from telegram.ext.dispatcher import run_async

import logging
import re


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–∏–ª—å–¥–∏–∏
def create_guild(bot, update):
    guild_tag = update.message.text.partition(' ')[2]
    if len(guild_tag) <= 0 or len(guild_tag) > 3:
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –£–∫–∞–∂–∏—Ç–µ —Ç—ç–≥ –Ω–æ–≤–æ–π –≥–∏–ª—å–¥–∏–∏.")
        return
    if any(c in guild_tag for c in ['\f', '\n', '\r', '\t', '\v', ' ']):
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. "
                                                              "–¢—ç–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∏–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.")
        return
    guild = Guild.get_guild(guild_tag=guild_tag)
    if guild is not None:
        bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è —Å —ç—Ç–∏–º —Ç—ç–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    guild = Guild(None, guild_tag, None, None, None, None, None, None, None, None, None, None, None)
    guild.create_guild()
    bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ—ë: "
                                                          "/edit_guild_{}".format(guild.id))
    return


# –î–û–†–û–ì–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø - –ø–æ–ª—É—á–µ–Ω–∏–µ (–∏ –≤—ã–≤–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏) —Å–ø–∏—Å–∫–∞ –≥–∏
# @run_async
def list_guilds(bot, update):
    response = "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ –≥–∏–ª—å–¥–∏–π:\n\n"
    for guild_id in Guild.guild_ids:
        guild = Guild.get_guild(guild_id=guild_id)
        if guild is None:
            logging.warning("Guild is None for the id {}".format(guild_id))
            continue
        response_new = "<b>{}</b>{}\n–î–∏–≤–∏–∑–∏–æ–Ω: {}\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: /edit_guild_{}\n" \
                       "\n".format(guild.tag, " --- " + guild.name if guild.name is not None else "",
                                   guild.division or "–ù–µ –∑–∞–¥–∞–Ω", guild.id)
        response_new += "‚öî: <b>{}</b>, üõ°: <b>{}</b>\n\n----------------------------------" \
                        "\n".format(guild.get_attack(), guild.get_defense())
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    response += "–î–æ–±–∞–≤–∏—Ç—å –≥–∏–ª—å–¥–∏—é: /create_guild {TAG}"
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')


# @dispatcher.run_async # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
def guild_info(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
        return
    if player.guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                                   "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    guild = Guild.get_guild(guild_id=player.guild)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    commander = Player.get_player(guild.commander_id)
    response = "<b>{}</b>  {}\n".format(guild.tag, guild.name or "")
    response += "–ö–æ–º–∞–Ω–¥–∏—Ä: {}\n".format("@" + commander.username if commander is not None else "–ù–µ –∑–∞–¥–∞–Ω")
    response += "–ß–∞—Ç –æ—Ç—Ä—è–¥–∞: {}, id: {}" \
                "\n{}\n".format(guild.chat_name or "–ù–µ –∑–∞–¥–∞–Ω",
                                "<code>{}</code>".format(guild.chat_id) if guild.chat_id is not None else "–ù–µ –∑–∞–¥–∞–Ω",
                                "<a href=\"{}\">–í—Å—Ç—É–ø–∏—Ç—å</a>".format("https://t.me/joinchat/" + guild.invite_link)
                                if guild.invite_link is not None else "")

    response += "\n–ò–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏: <b>{}</b>\n".format(guild.members_count)
    response += "‚öî: <b>{}</b>, üõ°: <b>{}</b>\n".format(guild.get_attack(), guild.get_defense())
    buttons = get_view_guild_buttons(guild)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML', reply_markup=buttons)


def list_players(bot, update, guild_id=None):
    mes = update.callback_query.message
    if guild_id is None:
        player = Player.get_player(update.callback_query.from_user.id)
        if player is None:
            bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
            return
        guild_id = player.guild
        if guild_id is None:
            bot.send_message(chat_id=mes.chat_id,
                             text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                  "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
            return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    response = "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b>\n".format(guild.tag)
    guild.sort_players_by_exp()
    for player_id in guild.members:
        player = Player.get_player(player_id)
        if player is None:
            logging.warning("Player in guild is None, guild = {}, player_id = {}".format(guild.tag, player_id))
            continue
        response_new = "<b>{}</b>\nüèÖ: <code>{}</code>, ‚öî: <code>{}</code>, üõ°: <code>{}</code>" \
                       "\n–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /view_profile_{}" \
                       "\n–£–¥–∞–ª–∏—Ç—å –∏–∑ –≥–∏–ª—å–¥–∏–∏: /remove_player_{}" \
                       "\n\n".format(player.nickname, player.lvl, player.attack, player.defense, player.id, player.id)
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏–∑ –≥–∏–ª—å–¥–∏–∏
def remove_player(bot, update):
    mes = update.message
    player_id = re.search("_(\\d+)", mes.text)
    if player_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player_id = int(player_id.group(1))
    if player_id == mes.from_user.id:
        bot.send_message(chat_id=mes.chat_id, text="–ü–æ—á–µ–º—É –±—ã –Ω–µ –≤—ã–π—Ç–∏ –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫? /leave_guild")
        return
    current_player = Player.get_player(mes.from_user.id)
    if current_player is None:
        return
    guild = Guild.get_guild(guild_id=current_player.guild)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    if not guild.check_high_access(current_player.id):
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–∞–≤–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –ª—é–¥—å–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Å–ª—É–∂–∏—Ç—å.")
        return
    player_to_remove = Player.get_player(player_id)
    if player_to_remove is None or player_to_remove.id not in guild.members:
        bot.send_message(chat_id=mes.chat_id, text="–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏.")
        return
    guild.delete_player(player_to_remove)
    bot.send_message(chat_id=update.message.chat_id, text="<b>{}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≥–∏–ª—å–¥–∏–∏ "
                                                          "<b>{}</b>".format(player_to_remove.nickname, guild.tag),
                     parse_mode='HTML')
    bot.send_message(chat_id=player_to_remove.id,
                     text="–ü–æ—è–≤–∏–≤—à–∏–π—Å—è –∏–∑-–∑–∞ —É–≥–ª–∞ —Å—Ç—Ä–∞–∂–Ω–∏–∫ –æ–∫–ª–∏–∫–Ω—É–ª –≤–∞—Å:\n"
                          "<em>–¢–≤–æ–π –∫–æ–º–∞–Ω–¥–∏—Ä –ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏, –≤–æ–∏–Ω!</em>",
                     parse_mode='HTML')


def leave_guild(bot, update):
    if update.message is not None:
        mes = update.message
        user_id = mes.from_user.id
    else:
        mes = update.callback_query.message
        user_id = update.callback_query.from_user.id
    player = Player.get_player(user_id)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ /hero.")
        return
    if player.guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    guild = Guild.get_guild(guild_id=player.guild)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if guild.commander_id == player.id:
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∏—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é")
        return
    guild.delete_player(player)
    bot.send_message(chat_id=mes.chat_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é")
    if update.callback_query is not None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –≥–∏–ª—å–¥–∏—é
def add(bot, update):
    player = Player.get_player(update.message.from_user.id)
    if player is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ /hero.")
        return
    guild = Guild.get_guild(guild_id=player.guild)
    if guild is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if player.guild != guild.id:
        bot.send_message(chat_id=update.message.chat_id, text="–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ—é –≥–∏–ª—å–¥–∏—é")
        return
    if update.message.chat_id != guild.chat_id:
        bot.send_message(chat_id=update.message.chat_id, text="–î–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏—é –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º "
                                                              "—á–∞—Ç–µ –≥–∏–ª—å–¥–∏–∏")
        return
    if player.id != guild.commander_id and player.id not in guild.assistants:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∏—Ä –∏ –µ–≥–æ –∑–∞–º—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–π—Ü–æ–≤.")
        return
    if update.message.reply_to_message is None:
        bot.send_message(chat_id=update.message.chat_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —è–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, "
                                                              "–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é.")
        return
    player_to_add = Player.get_player(update.message.reply_to_message.from_user.id)
    if player_to_add is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if player_to_add.guild is not None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    guild.add_player(player_to_add)

    bot.send_message(chat_id=update.message.chat_id, text="<b>{}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∏–ª—å–¥–∏—é "
                                                          "<b>{}</b>".format(player_to_add.nickname, guild.tag),
                     parse_mode='HTML')


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–∏
def get_edit_guild_text(guild):

    if guild.commander_id is not None:
        commander = Player.get_player(guild.commander_id)
    else:
        commander = None

    response = "–ö–æ–º–∞–Ω–¥–∏—Ä: {}\n".format("@" + commander.username if commander is not None else "–ù–µ –∑–∞–¥–∞–Ω")
    response += "–ß–∞—Ç –æ—Ç—Ä—è–¥–∞: <code>{}</code>, id: {}" \
                "\n{}".format(guild.chat_name or "–ù–µ –∑–∞–¥–∞–Ω",
                              "<code>{}</code>".format(guild.chat_id) if guild.chat_id is not None else "–ù–µ –∑–∞–¥–∞–Ω",
                              "<a href=\"{}\">–í—Å—Ç—É–ø–∏—Ç—å</a>".format("https://t.me/joinchat/" + guild.invite_link)
                              if guild.invite_link is not None else "")
    response += "\n\n‚öî: <b>{}</b>, üõ°: <b>{}</b>\n".format(guild.get_attack(), guild.get_defense())
    response += "–î–∏–≤–∏–∑–∏–æ–Ω: <b>{}</b>\n".format(guild.division or "–Ω–µ –∑–∞–¥–∞–Ω")
    response += "–ü—Ä–∏–∫–∞–∑—ã <b>{}</b>\n".format("–≤–∫–ª—é—á–µ–Ω—ã" if guild.orders_enabled else "–æ–∫–ª—é—á–µ–Ω—ã")
    response += "–°–æ–æ–±—â–µ–Ω–∏—è <b>{}</b>\n".format("–ø–∏–Ω—è—Ç—Å—è" if guild.pin_enabled else "–Ω–µ –ø–∏–Ω—è—Ç—Å—è")
    response += "–ü–∏–Ω—ã <b>{}</b>\n".format("–≥—Ä–æ–º–∫–∏–µ" if not guild.disable_notification else "—Ç–∏—Ö–∏–µ")
    return response


# –ö–æ–º–∞–Ω–¥–∞ /edit_guild
def edit_guild(bot, update):
    mes = update.message
    if mes.chat_id != mes.from_user.id:
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å.")
        return
    try:
        guild_id = int(mes.text.partition("@")[0].split("_")[2])
    except ValueError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    response = "–ì–∏–ª—å–¥–∏—è <b>{}</b>\n".format(guild.tag)
    response += get_edit_guild_text(guild)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML', reply_markup=get_edit_guild_buttons(guild))
    return


# –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞"
def edit_guild_commander(bot, update, user_data):
    try:
        user_data.update({"status": "edit_guild_commander",
                          "edit_guild_id": int(update.callback_query.data.split("_")[1])})
    except ValueError:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –≥–∏–ª—å–¥–∏–∏, "
                                                                             "–∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –í–≤–æ–¥ id –∫–æ–º–∞–Ω–¥–∏—Ä–∞
def change_guild_commander(bot, update, user_data):
    mes = update.message
    try:
        player_id = int(mes.text)
    except ValueError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player = Player.get_player(player_id)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id.")
        return
    guild_id = user_data.get("edit_guild_id")
    guild = None
    if guild_id is not None:
        guild = Guild.get_guild(guild_id=guild_id)
    if guild_id is None or guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    print(player.guild_tag, player.guild_tag, guild.tag)
    if player.guild_tag is not None and player.guild_tag != guild.tag:
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∏—Ä –º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–µ–π")
        return
    if player.guild_tag is None or player.guild is None:
        guild.add_player(player)
    guild.commander_id = player_id
    if guild.members is None:
        guild.members = []
    if player.id not in guild.members:
        guild.members.append(player.id)
    guild.update_to_database()
    if "status" in user_data:
        user_data.pop("status")
    if "edit_guild_id" in user_data:
        user_data.pop("edit_guild_id")
    bot.send_message(chat_id=update.message.chat_id, text="–ö–æ–º–∞–Ω–¥–∏—Ä–æ–º –≥–∏–ª—å–¥–∏–∏ <b>{}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω <b>{}</b> "
                                                          "{}".format(guild.tag, player.nickname,
                                                                      "(@{})".format(player.username)
                                                                      if player.username is not None else ""),
                     parse_mode='HTML')


# –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç –≥–∏–ª—å–¥–∏–∏"
def edit_guild_chat(bot, update, user_data):
    try:
        user_data.update(
            {"status": "edit_guild_chat", "edit_guild_id": int(update.callback_query.data.split("_")[1])})
    except ValueError:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≥–∏–ª—å–¥–∏–∏, "
                                                                             "–∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –í–≤–æ–¥ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≥–∏
def change_guild_chat(bot, update, user_data):
    mes = update.message
    try:
        chat_id = int(mes.text)
    except ValueError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    guild_id = user_data.get("edit_guild_id")
    guild = None
    if guild_id is not None:
        guild = Guild.get_guild(guild_id=guild_id)
    if guild_id is None or guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    try:
        message = bot.sync_send_message(chat_id=chat_id, text="–≠—Ç–æ —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –≥–∏–ª—å–¥–∏–∏ "
                                                              "<b>{}</b>".format(guild.tag), parse_mode='HTML')
        chat = bot.getChat(message.chat_id)
        if chat is None:
            bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id "
                                                                  "–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
            return
    except TelegramError:
        bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id "
                                                              "–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        return
    guild.chat_id = chat.id
    guild.chat_name = chat.title
    try:
        guild.invite_link = bot.exportChatInviteLink(chat_id)
        if guild.invite_link is not None:
            guild.invite_link = guild.invite_link[22:]  # –û–±—Ä–µ–∑–∞—é https://t.me/joinchat/
    except TelegramError:
        pass
    guild.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–ß–∞—Ç –≥–∏–ª—å–¥–∏–∏ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω "
                                               "–Ω–∞ <b>{}</b>".format(guild.tag, guild.chat_name or guild.chat_id),
                     parse_mode='HTML')
    if "status" in user_data:
        user_data.pop("status")
    if "edit_guild_id" in user_data:
        user_data.pop("edit_guild_id")


def edit_guild_division(bot, update, user_data):
    try:
        user_data.update(
            {"status": "edit_guild_division", "edit_guild_id": int(update.callback_query.data.split("_")[1])})
    except ValueError:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(chat_id=update.callback_query.message.chat_id,
                         text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–≤–∏–∑–∏–æ–Ω–∞ –≥–∏–ª—å–¥–∏–∏, –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


def change_guild_division(bot, update, user_data):
    mes = update.message
    guild_id = user_data.get("edit_guild_id")
    guild = None
    if guild_id is not None:
        guild = Guild.get_guild(guild_id=guild_id)
    if guild_id is None or guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    guild.division = mes.text
    guild.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–î–∏–≤–∏–∑–∏–æ–Ω <b>{}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "
                                               "<b>{}</b>".format(guild.tag, guild.division),
                     parse_mode='HTML')
    if "status" in user_data:
        user_data.pop("status")
    if "edit_guild_id" in user_data:
        user_data.pop("edit_guild_id")


def change_guild_bool_state(bot, update):
    try:
        guild_id = int(update.callback_query.data.split("_")[1])
    except ValueError:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    guild = Guild.get_guild(guild_id)
    if guild is None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    edit_type = update.callback_query.data[2]
    if edit_type == 'o':
        guild.orders_enabled = not guild.orders_enabled
    elif edit_type == 'p':
        guild.pin_enabled = not guild.pin_enabled
    elif edit_type == 'n':
        guild.disable_notification = not guild.disable_notification
    guild.update_to_database()
    mes = update.callback_query.message
    reply_markup = get_edit_guild_buttons(guild)
    new_text = get_edit_guild_text(guild)
    try:
        bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=new_text, reply_markup=reply_markup,
                            parse_mode='HTML')
    except TelegramError:
        pass
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                            text="–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –≤ –ª—Å
def chat_info(bot, update):
    response = "<b>{}</b>, id: <code>{}</code>".format(update.message.chat.title, update.message.chat_id)
    bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')
