"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–∏–ª—å–¥–∏—è–º–∏ –∫–∞–∫ —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏: —Å–æ–∑–¥–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ
–æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≥–∏–ª—å–¥–∏—è–º–∏, –∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –Ω–∏—Ö
"""
from castle_files.libs.guild import Guild
from castle_files.libs.player import Player
from castle_files.libs.bot_async_messaging import MAX_MESSAGE_LENGTH

from castle_files.bin.academy import change_headmaster
from castle_files.bin.service_functions import check_access
from castle_files.bin.reports import count_battle_id, count_battle_time

from castle_files.bin.buttons import get_edit_guild_buttons, get_delete_guild_buttons, get_view_guild_buttons, \
    get_guild_settings_buttons, get_guild_inline_buttons


from castle_files.work_materials.globals import dispatcher, cursor, conn, SUPER_ADMIN_ID, classes_to_emoji

from order_files.work_materials.pult_constants import divisions as divisions_const

from telegram.ext.dispatcher import run_async
from telegram.error import TelegramError
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

import logging
import re

GUILD_ROWS_ON_PAGE = 3


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–∏–ª—å–¥–∏–∏
def create_guild(bot, update):
    guild_tag = update.message.text.partition(' ')[2]
    if len(guild_tag) <= 0 or len(guild_tag) > 10:
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –£–∫–∞–∂–∏—Ç–µ —Ç—ç–≥ –Ω–æ–≤–æ–π –≥–∏–ª—å–¥–∏–∏.")
        return
    if any(c in guild_tag for c in ['\f', '\n', '\r', '\t', '\v', ' ']):
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. "
                                                              "–¢—ç–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∏–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.")
        return
    guild = Guild.get_guild(guild_tag=guild_tag)
    if guild is not None:
        bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è —Å —ç—Ç–∏–º —Ç—ç–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    guild = Guild(None, guild_tag, None, None, None, None, None, None, None, None, None, None, None)
    guild.create_guild()
    bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ—ë: "
                                                          "/edit_guild_{}".format(guild.id))
    return


def guild_repair(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    guild = Guild.get_guild(player.guild)
    if guild is None:
        bot.send_message(chat_id=update.message.chat_id, text="–í—ã –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å.")
        return
    if not guild.check_high_access(player.id):
        bot.send_message(chat_id=update.message.chat_id, text="–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞–º –∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è–º.")
        return
    response = "–ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–º–æ–Ω—Ç:\n"
    for pl_id in guild.members:
        pl = Player.get_player(pl_id)
        res_new = "{}<b>{}</b> - @{}\n".format(pl.castle, pl.nickname, pl.username)
        has_broken = False
        for key, eq in list(pl.equipment.items()):
            if eq is None:
                continue
            if eq.condition == "broken":
                res_new += "    {} {}\n        (<em>{}</em>)\n" \
                           "".format(eq.name, " {} ".format(eq.quality) if eq.quality else "", key)
                has_broken = True
        res_new += "\n"
        if has_broken:
            response += res_new
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')




def guilds(bot, update):
    if not check_access(update.message.from_user.id):
        return
    divisions = get_edit_divisions()
    guilds_divided = build_divisions_guilds_list(divisions)
    buttons = get_divisions_buttons(guilds_divided, 0)
    bot.send_message(chat_id=update.message.chat_id, text=get_divisions_text(guilds_divided), parse_mode='HTML',
                     reply_markup=buttons)


def get_edit_divisions():
    return divisions_const[:3]



def guilds_division_change_page(bot, update):
    if not check_access(update.callback_query.from_user.id):
        return
    mes = update.callback_query.message
    data = update.callback_query.data
    new_page = re.search("guilds_divisions_page_(\\d+)", data)
    if new_page is None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                show_alert=True)
        return
    new_page = int(new_page.group(1))
    divisions = get_edit_divisions()
    guilds_divided = build_divisions_guilds_list(divisions)
    bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=get_divisions_text(guilds_divided),
                        reply_markup=get_divisions_buttons(guilds_divided, new_page), parse_mode='HTML')
    bot.answer_callback_query(callback_query_id=update.callback_query.id)


def get_divisions_buttons(guilds_divided: dict, page: int):
    buttons = []
    max_guilds_num = max(len(data.get("guilds")) for data in list(guilds_divided.values()))
    for row_num in range(GUILD_ROWS_ON_PAGE):
        buttons.append([])
        for division, guilds_info in list(guilds_divided.items()):
            guilds: [Guild] = guilds_info.get("guilds")
            try:
                guild = guilds[page * GUILD_ROWS_ON_PAGE + row_num]
                buttons[row_num].append(InlineKeyboardButton(
                    text="{}|‚öî{:.1f}\\{:.1f}".format(guild.tag, guild.get_attack() / 1000., guild.get_defense() / 1000.)
                    if guild.orders_enabled else "‚ùå{}".format(guild.tag),
                    callback_data="guilds_divisions_{}_page_{}".format(guild.id, page)))
            except IndexError:
                guild = None
                buttons[row_num].append(InlineKeyboardButton("‚ûñ", callback_data="skip"))
    if page * GUILD_ROWS_ON_PAGE < max_guilds_num:
        buttons.append([InlineKeyboardButton("‚û°", callback_data="guilds_divisions_page_{}".format(page + 1))])
    if page > 0:
        buttons.append([InlineKeyboardButton("‚¨Ö", callback_data="guilds_divisions_page_{}".format(page - 1))])
    return InlineKeyboardMarkup(buttons)


def get_divisions_text(guilds_divided: dict):
    DIVIDER = " "
    response = "<code>"
    for name in guilds_divided:
        response += "{:<10}{}".format(name, DIVIDER)
    response += "\n"
    stages = {"‚öîÔ∏è": "atk", "üõ°": "def"}
    for stage_name, key in list(stages.items()):
        for division, data in list(guilds_divided.items()):
            response += "{}{:<8}{}".format(stage_name, data.get(key), DIVIDER)
        response += "\n"
    response += "</code>"
    return response


def build_divisions_guilds_list(divisions: list):
    ret = {}
    for guild_id in Guild.guild_ids:
        guild = Guild.get_guild(guild_id)
        division = guild.division if guild.division in divisions else "–ù–µ—Ç"
        if division == "–ù–µ—Ç":
            continue
        div_info = ret.get(division)
        if div_info is None:
            div_info = {"guilds": [], "atk": 0, "def": 0}
            ret.update({division: div_info})
        guilds = div_info.get("guilds")
        guilds.append(guild)
        if guild.orders_enabled:
            div_info.update({"atk": guild.get_attack() + div_info.get("atk", 0),
                             "def": guild.get_defense() + div_info.get("def", 0)})
    return ret


def edit_guild_inline(bot, update):
    if not check_access(update.callback_query.from_user.id):
        return
    mes = update.callback_query.message
    data = update.callback_query.data
    parse = re.search("guilds_divisions_(\\d+)_page_(\\d+)", data)
    if parse is None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                show_alert=True)
        return
    guild_id, page = int(parse.group(1)), int(parse.group(2))
    guild = Guild.get_guild(guild_id)
    buttons = get_guild_inline_buttons(guild, page)
    text = get_edit_guild_text(guild)
    bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=text,
                        reply_markup=buttons, parse_mode='HTML')
    bot.answer_callback_query(callback_query_id=update.callback_query.id)


def inline_edit_guild_division(bot, update):
    if not check_access(update.callback_query.from_user.id):
        return
    divisions = get_edit_divisions()
    mes = update.callback_query.message
    data = update.callback_query.data
    parse = re.search("guild_change_division_(\\d+)_page_(\\d+)", data)
    if parse is None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                show_alert=True)
        return
    guild_id, page = int(parse.group(1)), int(parse.group(2))
    guild = Guild.get_guild(guild_id)
    try:
        current = divisions.index(guild.division)
    except ValueError:
        current = len(divisions) - 1
    if current == len(divisions) - 1:
        current = -1
    current += 1
    new = divisions[current]
    guild.division = new
    guild.update_to_database()
    text = get_edit_guild_text(guild)
    buttons = get_guild_inline_buttons(guild, page)
    bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=text,
                        reply_markup=buttons, parse_mode='HTML')
    bot.answer_callback_query(callback_query_id=update.callback_query.id)





# –î–û–†–û–ì–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø - –ø–æ–ª—É—á–µ–Ω–∏–µ (–∏ –≤—ã–≤–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏) —Å–ø–∏—Å–∫–∞ –≥–∏
# @run_async
def list_guilds(bot, update):
    response = "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ –≥–∏–ª—å–¥–∏–π:\n\n"
    attack = 0
    defense = 0
    for guild_id in Guild.guild_ids:
        guild = Guild.get_guild(guild_id=guild_id)
        if guild is None:
            logging.warning("Guild is None for the id {}".format(guild_id))
            continue
        response_new = "<b>{}</b>{}\n–î–∏–≤–∏–∑–∏–æ–Ω: {}\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: /edit_guild_{}\n–£–¥–∞–ª–∏—Ç—å: /delete_guild_{}\n" \
                       "\n".format(guild.tag, " --- " + guild.name if guild.name is not None else "",
                                   guild.division or "–ù–µ –∑–∞–¥–∞–Ω", guild.id, guild.id)
        response_new += "‚öî: <b>{}</b>, üõ°: <b>{}</b>\n\n----------------------------------" \
                        "\n".format(guild.get_attack(), guild.get_defense())
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
        attack += guild.get_attack()
        defense += guild.get_defense()
    response += "–í—Å–µ–≥–æ: ‚öî: <b>{}</b>, üõ°: <b>{}</b>\n –î–æ–±–∞–≤–∏—Ç—å –≥–∏–ª—å–¥–∏—é: /create_guild [TAG]".format(attack, defense)
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')


def guild_commanders(bot, update):
    player = Player.get_player(update.message.from_user.id)
    if player is None:
        return
    guild = Guild.get_guild(player.guild)
    if not (check_access(player.id)):  # or (guild is not None and guild.check_high_access(player.id))):
        return
    response = "–°–ø–∏—Å–æ–∫ üéñ–≥–∏–ª—å–¥–∏–π, üéó–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤ –∏ üéñ–∑–∞–º–æ–≤:\n"
    for guild_id in Guild.guild_ids:
        guild = Guild.get_guild(guild_id=guild_id)
        if guild is None:
            logging.warning("Guild is None for the id {}".format(guild_id))
            continue
        commander = Player.get_player(guild.commander_id, notify_on_error=False)
        response_new = "<b>{}</b>{}\nüéó: @{}".format(guild.tag, " --- " + guild.name if guild.name is not None else "",
                                                    commander.username if commander is not None else "–ù–µ—Ç")
        if guild.assistants:
            response_new += "\nüéñ: "
        for player_id in guild.assistants:
            player = Player.get_player(player_id, notify_on_error=False)
            if player is None:
                continue
            response_new += "@{} ".format(player.username)
        response_new += "\n--------------------------\n"
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')


def g_info(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    guild = Guild.get_guild(player.guild)
    guild_tag = mes.text.split()
    if len(guild_tag) == 1:
        if guild is None:
            bot.send_message(chat_id=mes.chat_id,
                             text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                  "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
            return
        requested_guild = guild
    else:
        guild_tag = guild_tag[1]
        if not (check_access(player.id) or (guild is not None and guild.check_high_access(player.id))):
            bot.send_message(chat_id=mes.chat_id,
                             text="–û—Å–æ–±–∏—Å—Ç –º—Ä–∞—á–Ω–æ –≤–∑–≥–ª—è–Ω—É–ª –Ω–∞ –≤–∞—Å. –ï–≥–æ –≥–ª–∞–∑–∞ –±—É–¥—Ç–æ –ø—Ä–æ–Ω–∑–∞–ª–∏ –Ω–∞—Å–∫–≤–æ–∑—å.\n"
                                  "\"–ù–µ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–≤–µ–¥–µ–Ω—å—è.\", ‚Äî –Ω–∞–∫–æ–Ω–µ—Ü –ø—Ä–æ—Ü–µ–¥–∏–ª –æ–Ω.")
            return
        requested_guild = Guild.get_guild(guild_tag=guild_tag)
        if requested_guild is None:
            bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
    commander = Player.get_player(requested_guild.commander_id, notify_on_error=False)
    glory, lvl, members = requested_guild.api_info.get("glory"), requested_guild.api_info.get("lvl"), \
        requested_guild.api_info.get("members")
    response = "<b>{}</b>\n{}üéó–ö–æ–º–∞–Ω–¥–∏—Ä: {}\n".format(
        "{} ({})".format(requested_guild.name, requested_guild.tag) if requested_guild.name is not None else
        requested_guild.tag, "üèÖ: <b>{}</b>, üéñ: <b>{}</b>, üë•: <b>{}</b>\n".format(lvl, glory, members) if
        all([lvl, glory, members]) else "", "<b>{}</b> (@{})".format(commander.nickname, commander.username)
        if commander is not None else "–ù–µ—Ç")

    if guild.id == requested_guild.id:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏
        if guild.assistants:
            response += "üéñ–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏: "
            for player_id in guild.assistants:
                player = Player.get_player(player_id, notify_on_error=False)
                if player is None:
                    continue
                response += "@{} ".format(player.username)
        response += "\n\n"
        stock_size, stock_limit = guild.api_info.get("stock_size"), guild.api_info.get("stock_limit")
        if stock_size is not None and stock_limit is not None:
            response += "üì¶–°—Ç–æ–∫ –≥–∏–ª—å–¥–∏–∏: <b>{}</b> / <b>{}</b>".format(stock_size, stock_limit)
    bot.send_message(chat_id=mes.from_user.id, text=response, parse_mode='HTML')


# @dispatcher.run_async # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
def guild_info(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
        return
    if 'academy' in mes.text:
        if mes.chat_id != mes.from_user.id:
            return
        guild = Guild.get_academy()
        if player.id not in guild.members and player.id not in guild.assistants and player.id != guild.commander_id:
            return
    else:
        if player.guild is None:
            bot.send_message(chat_id=mes.chat_id,
                             text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                  "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
            return
        guild = Guild.get_guild(guild_id=player.guild)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    commander = Player.get_player(guild.commander_id)
    response = "[<b>{}</b>]  {}\n".format(guild.tag, guild.name or "")
    response += "–ö–æ–º–∞–Ω–¥–∏—Ä: {}\n".format("@" + commander.username if commander is not None else "–ù–µ –∑–∞–¥–∞–Ω")
    if guild.invite_link is None:
        try:
            guild.invite_link = bot.exportChatInviteLink(guild.chat_id)
            if guild.invite_link is not None:
                guild.invite_link = guild.invite_link[22:]  # –û–±—Ä–µ–∑–∞—é https://t.me/joinchat/
                guild.update_to_database()
        except TelegramError:
            pass
    response += "–ß–∞—Ç –æ—Ç—Ä—è–¥–∞: {}, id: {}" \
                "\n{}\n".format(guild.chat_name or "–ù–µ –∑–∞–¥–∞–Ω",
                                "<code>{}</code>".format(guild.chat_id) if guild.chat_id is not None else "–ù–µ –∑–∞–¥–∞–Ω",
                                "<a href=\"{}\">–í—Å—Ç—É–ø–∏—Ç—å</a>".format("https://t.me/joinchat/" + guild.invite_link)
                                if guild.invite_link is not None else "")

    response += "\n–ò–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏: <b>{}</b>\n".format(guild.members_count)
    response += "‚öî: <b>{}</b>, üõ°: <b>{}</b>\n".format(guild.get_attack(), guild.get_defense())
    buttons = get_view_guild_buttons(guild, user_id=mes.from_user.id)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML', reply_markup=buttons)


def guild_reports(bot, update):
    if update.message is not None:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–∑–æ–≤–æ–º —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤.
        mes = update.message
        requested_player_id = mes.from_user.id
        if not check_access(mes.from_user.id):
            bot.send_message(chat_id=mes.chat_id, text="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        try:
            guild_tag = mes.text.split()[1]
        except IndexError:
            bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
            return
        guild = Guild.get_guild(guild_tag=guild_tag)
        try:
            battle_id = int(mes.text.split()[2])
        except (IndexError, ValueError):
            battle_id = count_battle_id(message=None)
    else:
        # –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "—Ä–µ–ø–æ—Ä—Ç—ã" –≤ –º–µ–Ω—é –≥–∏–ª—å–¥–∏–∏.
        mes = update.callback_query.message
        data = update.callback_query.data
        requested_player_id = update.callback_query.from_user.id
        guild_id = re.search("_(\\d+)", data)
        if guild_id is None:
            bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        guild_id = int(guild_id.group(1))
        requested_player = Player.get_player(requested_player_id)
        battle_id = count_battle_id(mes)
        if requested_player is None:
            bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
            return
        if guild_id is None:
            bot.send_message(chat_id=mes.chat_id,
                             text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                  "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
            return
        guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not guild.check_high_access(requested_player_id) and update.callback_query is not None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–í—ã –±–æ–ª–µ–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º")
        return
    guild.sort_players_by_exp()
    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∏–ª—å–¥–∏–∏ <b>{}</b> –ø–æ –±–∏—Ç–≤–µ <b>{}</b> (‚Ññ <b>{}</b>):" \
               "\n".format(guild.tag, count_battle_time(battle_id).strftime("%d/%m/%y %H:%M:%S"), battle_id)
    unsent_reports = []
    for player_id in guild.members:
        request = "select player_id, lvl, attack, additional_attack, defense, additional_defense, exp, gold, stock " \
                  "from reports where player_id = %s and battle_id = %s "
        cursor.execute(request, (player_id, battle_id,))
        row = cursor.fetchone()
        if row is None:
            unsent_reports.append(player_id)
            continue
        player = Player.get_player(row[0])
        if player is None:
            continue
        response_new = "<b>{}</b> -- @{}\nüèÖ:<code>{}</code> ‚öîÔ∏è:<code>{}</code>{} üõ°<code>{}</code>{} üî• <code>{}" \
                       "</code> üí∞ <code>{}</code> üì¶ <code>{}</code>\n\n" \
                       "".format(player.nickname, player.username, row[1], row[2],
                                 "({}{})".format("+" if row[3] > 0 else"", row[3]) if row[3] != 0 else "",
                                 row[4], "({}{})".format("+" if row[5] > 0 else"", row[5]) if row[5] != 0 else "",
                                 row[6], row[7], row[8])
        if len(response + response_new) >= MAX_MESSAGE_LENGTH:  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    if response != "" and update.callback_query is not None:
        bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
        response = ""
    response += "\n–ù–µ —Å–¥–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç—ã:\n"
    for player_id in unsent_reports:
        player = Player.get_player(player_id)
        if player is None:
            continue
        response_new = "<b>{}</b> -- @{}\n".format(player.nickname, player.username)
        if len(response + response_new) >= MAX_MESSAGE_LENGTH:  # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    response += "\n–í—Å–µ–≥–æ: <b>{}/{}</b> —Ä–µ–ø–æ—Ä—Ç–æ–≤".format(guild.members_count - len(unsent_reports), len(guild.members))
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
    if update.callback_query is not None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


def get_guild_settings_text(guild):
    response = "–ì–∏–ª—å–¥–∏—è <b>{}</b>\n\n".format(guild.tag)
    settings = guild.settings
    if settings is None:
        settings = {}
        guild.settings = settings
    withdraw, unpin, arena_notify, battle_notify = settings.get("withdraw"), settings.get("unpin"), \
        settings.get("arena_notify"), settings.get("battle_notify")
    if withdraw is None:
        withdraw = True
        settings.update({"withdraw": withdraw})
    response += "<code>{:<18}</code> <b>{}</b>\n".format("üè∑–í—ã–¥–∞—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤",
                                                         "‚úÖ–≤–∫–ª—é—á–µ–Ω–∞" if withdraw else "‚ùå–æ—Ç–∫–ª—é—á–µ–Ω–∞")

    if unpin is None:
        unpin = True
        settings.update({"unpin": unpin})
    response += "<code>{:<18}</code> <b>{}</b>\n".format("üìå–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–∏–Ω–∞",
                                                         "‚úÖ–≤–∫–ª—é—á–µ–Ω–æ" if unpin else "‚ùå–æ—Ç–∫–ª—é—á–µ–Ω–æ")

    if arena_notify is None:
        arena_notify = True
        settings.update({"arena_notify": arena_notify})
    response += "<code>{:<18}</code> <b>{}</b>\n".format("üîî–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ 12",
                                                         "‚úÖ–≤–∫–ª—é—á–µ–Ω–∞" if arena_notify else "‚ùå–æ—Ç–∫–ª—é—á–µ–Ω–∞")

    if battle_notify is None:
        battle_notify = True
        settings.update({"battle_notify": battle_notify})
    response += "<code>{:<20}</code> <b>{}</b>\n".format("‚öîÔ∏èÔ∏è–ü–∏–Ω–≥–∏ –∫ –±–∏—Ç–≤–µ",  # –ù–µ –∏–º–µ—é –Ω–∏ –º–∞–ª–µ–π—à–µ–≥–æ –ø–æ–Ω—è—Ç–∏—è, –ø–æ—á–µ–º—É 20
                                                         "‚úÖ–≤–∫–ª—é—á–µ–Ω—ã" if battle_notify else "‚ùå–æ—Ç–∫–ª—é—á–µ–Ω—ã")
    return response


def guild_setting(bot, update):
    mes = update.callback_query.message
    data = update.callback_query.data
    guild_id = re.search("_(\\d+)", data)
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    guild_id = int(guild_id.group(1))
    requested_player = Player.get_player(update.callback_query.from_user.id)
    if requested_player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
        return
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                              "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not guild.check_high_access(update.callback_query.from_user.id):
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–í—ã –±–æ–ª–µ–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º")
        return
    response = get_guild_settings_text(guild)
    buttons = get_guild_settings_buttons(guild)
    bot.send_message(chat_id=update.callback_query.message.chat_id, text=response, reply_markup=buttons,
                     parse_mode='HTML')
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


def edit_guild_setting(bot, update):
    data_to_setting = {"gswith": "withdraw", "gsunpin": "unpin", "gsarenanotify": "arena_notify",
                       "gsbattlenotify": "battle_notify"}
    mes = update.callback_query.message
    data = update.callback_query.data
    setting = data_to_setting.get(data.partition("_")[0])
    if setting is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    guild_id = re.search("_(\\d+)", data)
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    guild_id = int(guild_id.group(1))
    requested_player = Player.get_player(update.callback_query.from_user.id)
    if requested_player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
        return
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                              "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not guild.check_high_access(update.callback_query.from_user.id):
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–í—ã –±–æ–ª–µ–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º")
        return
    settings = guild.settings
    if settings is None:
        settings = {}
        guild.settings = settings
    cur = settings.get(setting)
    if cur is None:
        cur = True
        settings.update({setting: cur})
    settings.update({setting: not cur})
    guild.update_to_database(need_order_recashe=False)
    response = get_guild_settings_text(guild)
    buttons = get_guild_settings_buttons(guild)
    bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=response, reply_markup=buttons,
                        parse_mode='HTML')
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


def list_players(bot, update, guild_id=None):
    mes = update.callback_query.message
    if guild_id is None:
        data = update.callback_query.data
        guild_id = re.search("_(\\d+)", data)
        if guild_id is None:
            bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        guild_id = int(guild_id.group(1))
        player = Player.get_player(update.callback_query.from_user.id)
        if player is None:
            bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
            return
        if guild_id is None:
            bot.send_message(chat_id=mes.chat_id,
                             text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                                  "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
            return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if guild.tag == '–ê–ö–ê–î–ï–ú–ò–Ø':
        user_id = update.callback_query.from_user.id
        if user_id != guild.commander_id and user_id not in guild.assistants:
            return
    response = "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b>\n".format(guild.tag)
    guild.sort_players_by_exp()
    guild.calculate_attack_and_defense()
    high_access = guild.check_high_access(update.callback_query.from_user.id)
    if high_access:
        response += "<em>üñá ‚Äî –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ê–ü–ò, üìé ‚Äî –±–µ–∑ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</em>\n\n"
    for player_id in guild.members:
        player = Player.get_player(player_id)
        if player is None:
            logging.warning("Player in guild is None, guild = {}, player_id = {}".format(guild.tag, player_id))
            continue
        api_text = ""
        if high_access:
            token = player.api_info.get("token")
            if token is not None:
                access = player.api_info.get("access") or []
                if "gear" in access:
                    api_text = "üñá"
                else:
                    api_text = "üìé"
        rp1, rp2, rp3 = player.get_reports_count()
        response_new = "{}<b>{}</b> @{} {}\nüî•<code>{}</code>,üèÖ<code>{}\n‚öî{}, üõ°{}, " \
                       "üéñ{}/{}</code>" \
                       "".format(classes_to_emoji.get(player.game_class) or "", player.nickname, player.username,
                                 api_text, player.exp, player.lvl, player.attack, player.defense, rp1, rp2)
        if high_access:
            response_new += "\n–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /view_profile_{}" \
                       "".format(player.id)
        response_new += "\n\n"
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    response += "–í—Å–µ–≥–æ: ‚öî: <code>{}</code>, üõ°: <code>{}</code>".format(guild.get_attack(), guild.get_defense())
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏–∑ –≥–∏–ª—å–¥–∏–∏
def remove_player(bot, update):
    mes = update.message
    player_id = re.search("_(\\d+)", mes.text)
    if player_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player_id = int(player_id.group(1))
    if player_id == mes.from_user.id:
        bot.send_message(chat_id=mes.chat_id, text="–ü–æ—á–µ–º—É –±—ã –Ω–µ –≤—ã–π—Ç–∏ –∫–∞–∫ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫? /leave_guild")
        return
    current_player = Player.get_player(mes.from_user.id)
    if current_player is None:
        return
    guild = Guild.get_guild(guild_id=current_player.guild)
    player_to_remove = Player.get_player(player_id)
    player_to_remove_guild = guild
    if player_to_remove_guild is not None and player_to_remove_guild.is_academy():
        # –ö–æ—Å—Ç—ã–ª—å –Ω–∞ —É—á–∏—Ç–µ–ª–µ–π –≤ –∞–∫–∞–¥–µ–º–∫–µ –±–µ–∑ –≥–∏–ª—å–¥–∏–∏ (—Ç–∞–∫–∏–µ –±—ã–≤–∞—é—Ç, –¥–∞)
        pass
    else:
        if guild is None:
            bot.send_message(chat_id=mes.chat_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.")
            return
    if not guild.check_high_access(current_player.id):
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–∞–≤–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –ª—é–¥—å–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Å–ª—É–∂–∏—Ç—å.")
        return

    if player_to_remove is None or player_to_remove.id not in guild.members:
        player_to_remove_guild = Guild.get_guild(player_to_remove.guild)
        if player_to_remove_guild is not None and player_to_remove_guild.is_academy() and \
                player_to_remove_guild.check_high_access(current_player.id):
            pass
        else:
            if player_to_remove.guild is not None:
                player_to_remove_guild = Guild.get_guild(player_to_remove.guild)
                if player_id == player_to_remove_guild.commander_id or player_id in player_to_remove_guild.assistants:
                    pass
                else:
                    bot.send_message(chat_id=mes.chat_id, text="–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏.")
                    return
    guild = player_to_remove_guild
    guild.delete_player(player_to_remove)
    bot.send_message(chat_id=update.message.chat_id, text="<b>{}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≥–∏–ª—å–¥–∏–∏ "
                                                          "<b>{}</b>".format(player_to_remove.nickname, guild.tag),
                     parse_mode='HTML')
    bot.send_message(chat_id=player_to_remove.id,
                     text="–ü–æ—è–≤–∏–≤—à–∏–π—Å—è –∏–∑-–∑–∞ —É–≥–ª–∞ —Å—Ç—Ä–∞–∂–Ω–∏–∫ –æ–∫–ª–∏–∫–Ω—É–ª –≤–∞—Å:\n"
                          "<em>–¢–≤–æ–π –∫–æ–º–∞–Ω–¥–∏—Ä –ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –≥–∏–ª—å–¥–∏–∏, –≤–æ–∏–Ω!</em>",
                     parse_mode='HTML')


def leave_guild(bot, update):
    if update.message is not None:
        mes = update.message
        user_id = mes.from_user.id
        guild_id = None
    else:
        mes = update.callback_query.message
        user_id = update.callback_query.from_user.id
        data = update.callback_query.data
        guild_id = re.search("_(\\d+)", data)
        if guild_id is None:
            bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        guild_id = int(guild_id.group(1))
    player = Player.get_player(user_id)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ /hero.")
        return
    if player.guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    if guild_id is None:
        guild_id = player.guild
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if guild.commander_id == player.id:
        # bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∏—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é")
        # return
        guild.commander_id = None
    guild.delete_player(player)
    bot.send_message(chat_id=mes.chat_id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥–∏–ª—å–¥–∏—é")
    if update.callback_query is not None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –≥–∏–ª—å–¥–∏—é
def add(bot, update):
    player = Player.get_player(update.message.from_user.id)
    if player is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ /hero.")
        return
    academy = Guild.get_academy()
    if academy is not None and update.message.chat_id == academy.chat_id:
        guild = academy
    else:
        guild = Guild.get_guild(guild_id=player.guild)
        if guild is None:
            bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if player.guild != guild.id:
            bot.send_message(chat_id=update.message.chat_id, text="–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ—é –≥–∏–ª—å–¥–∏—é")
            return
    if update.message.chat_id != guild.chat_id:
        bot.send_message(chat_id=update.message.chat_id, text="–î–æ–±–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏—é –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º "
                                                              "—á–∞—Ç–µ –≥–∏–ª—å–¥–∏–∏")
        return
    if player.id != guild.commander_id and player.id not in guild.assistants:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∏—Ä –∏ –µ–≥–æ –∑–∞–º—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–π—Ü–æ–≤.")
        return
    if update.message.reply_to_message is None:
        bot.send_message(chat_id=update.message.chat_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —è–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, "
                                                              "–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥–∏–ª—å–¥–∏—é.")
        return
    player_to_add = Player.get_player(update.message.reply_to_message.from_user.id)
    if player_to_add is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if player_to_add.guild is not None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–∏–ª—å–¥–∏–∏.")
        return
    guild.add_player(player_to_add)

    bot.send_message(chat_id=update.message.chat_id, text="<b>{}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∏–ª—å–¥–∏—é "
                                                          "<b>{}</b>".format(player_to_add.nickname, guild.tag),
                     parse_mode='HTML')


def add_assistant(bot, update):
    player = Player.get_player(update.message.from_user.id)
    if player is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ "
                                                              "/hero –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É.")
        return
    guild = Guild.get_guild(guild_id=player.guild)
    if guild is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if player.guild != guild.id:
        bot.send_message(chat_id=update.message.chat_id, text="–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–æ–≤ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏")
        return
    if update.message.chat_id != guild.chat_id:
        bot.send_message(chat_id=update.message.chat_id, text="–î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º "
                                                              "—á–∞—Ç–µ –≥–∏–ª—å–¥–∏–∏")
        return
    if player.id != guild.commander_id and player.id not in guild.assistants:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∏—Ä –∏ –µ–≥–æ –∑–∞–º—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∑–∞–º–æ–≤.")
        return
    if update.message.reply_to_message is None:
        bot.send_message(chat_id=update.message.chat_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —è–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, "
                                                              "–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–æ–º.")
        return
    player_to_add = Player.get_player(update.message.reply_to_message.from_user.id)
    if player_to_add is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if player_to_add.guild != guild.id:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–°–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏.")
        return
    if guild.check_high_access(player_to_add.id):
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ —É–∂–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.")
        return
    guild.assistants.append(player_to_add.id)
    guild.update_to_database()
    bot.send_message(chat_id=update.message.chat_id,
                     text="<b>{}</b> —Ç–µ–ø–µ—Ä—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b>".format(player_to_add.nickname, guild.tag),
                     parse_mode='HTML', reply_to_message_id=update.message.message_id)


def del_assistant(bot, update):
    player = Player.get_player(update.message.from_user.id)
    if player is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ "
                                                              "/hero –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É.")
        return
    guild = Guild.get_guild(guild_id=player.guild)
    if guild is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if player.guild != guild.id:
        bot.send_message(chat_id=update.message.chat_id, text="–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∑–∞–º–æ–≤ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏")
        return
    if update.message.chat_id != guild.chat_id:
        bot.send_message(chat_id=update.message.chat_id, text="–£–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º "
                                                              "—á–∞—Ç–µ –≥–∏–ª—å–¥–∏–∏")
        return
    if player.id != guild.commander_id and player.id not in guild.assistants:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∏—Ä –∏ –µ–≥–æ –∑–∞–º—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∑–∞–º–æ–≤.")
        return
    if update.message.reply_to_message is None:
        bot.send_message(chat_id=update.message.chat_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —è–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, "
                                                              "–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–∞.")
        return
    player_to_add = Player.get_player(update.message.reply_to_message.from_user.id)
    if player_to_add is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if not guild.check_high_access(player_to_add.id):
        bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–æ–∫ –∏ –Ω–µ —è–≤–ª—è–ª—Å—è –∑–∞–º–æ–º.")
        return
    if player_to_add.id == guild.commander_id and False:
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–ª—å–∑—è —Å–≤–µ—Ä–≥–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞.")
        return
    guild.assistants.remove(player_to_add.id)
    guild.update_to_database()
    bot.send_message(chat_id=update.message.chat_id,
                     text="<b>{}</b> –±–æ–ª–µ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b>".format(player_to_add.nickname,
                                                                                                guild.tag),
                     parse_mode='HTML', reply_to_message_id=update.message.message_id)


def assistants(bot, update):
    mes = update.callback_query.message
    data = update.callback_query.data
    guild_id = re.search("_(\\d+)", data)
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    guild_id = int(guild_id.group(1))
    player = Player.get_player(update.callback_query.from_user.id)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /hero –∏–∑ @ChatWarsBot.")
        return
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                              "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not guild.check_high_access(update.callback_query.from_user.id):
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id, text="–í—ã –±–æ–ª–µ–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º")
        return
    if not guild.assistants:
        response = "–í –≥–∏–ª—å–¥–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π.\n"
    else:
        response = "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –≥–∏–ª—å–¥–∏–∏ <b>{}</b>:\n".format(guild.tag)
        for player_id in guild.assistants:
            current_player = Player.get_player(player_id)
            if current_player is None:
                continue
            response += "@{} - <b>{}</b>\n".format(current_player.username, current_player.nickname)
    response += "\n–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - /add_assistant - —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, " \
                "–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º\n–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è - " \
                "/del_assistant - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, " \
                "–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è"
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–∏
def get_edit_guild_text(guild):

    if guild.commander_id is not None:
        commander = Player.get_player(guild.commander_id)
    else:
        commander = None

    response = "–ö–æ–º–∞–Ω–¥–∏—Ä: {}\n".format("@" + commander.username if commander is not None else "–ù–µ –∑–∞–¥–∞–Ω")
    response += "–ß–∞—Ç –æ—Ç—Ä—è–¥–∞: <code>{}</code>, id: {}" \
                "\n{}".format(guild.chat_name or "–ù–µ –∑–∞–¥–∞–Ω",
                              "<code>{}</code>".format(guild.chat_id) if guild.chat_id is not None else "–ù–µ –∑–∞–¥–∞–Ω",
                              "<a href=\"{}\">–í—Å—Ç—É–ø–∏—Ç—å</a>".format("https://t.me/joinchat/" + guild.invite_link)
                              if guild.invite_link is not None else "")
    response += "\n\n‚öî: <b>{}</b>, üõ°: <b>{}</b>\n".format(guild.get_attack(), guild.get_defense())
    response += "–î–∏–≤–∏–∑–∏–æ–Ω: <b>{}</b>\n".format(guild.division or "–Ω–µ –∑–∞–¥–∞–Ω")
    response += "–†–∞—Å—Å—ã–ª–∫–∞ <b>{}</b>\n".format("–≤–∫–ª—é—á–µ–Ω–∞" if guild.mailing_enabled else "–æ–∫–ª—é—á–µ–Ω–∞")
    response += "–ü—Ä–∏–∫–∞–∑—ã <b>{}</b>\n".format("–≤–∫–ª—é—á–µ–Ω—ã" if guild.orders_enabled else "–æ–∫–ª—é—á–µ–Ω—ã")
    response += "–°–æ–æ–±—â–µ–Ω–∏—è <b>{}</b>\n".format("–ø–∏–Ω—è—Ç—Å—è" if guild.pin_enabled else "–Ω–µ –ø–∏–Ω—è—Ç—Å—è")
    response += "–ü–∏–Ω—ã <b>{}</b>\n".format("–≥—Ä–æ–º–∫–∏–µ" if not guild.disable_notification else "—Ç–∏—Ö–∏–µ")
    return response


# –ö–æ–º–∞–Ω–¥–∞ /edit_guild
def edit_guild(bot, update):
    mes = update.message
    if mes.chat_id != mes.from_user.id:
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å.")
        return
    try:
        guild_id = int(mes.text.partition("@")[0].split("_")[2])
    except ValueError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    response = "–ì–∏–ª—å–¥–∏—è <b>{}</b>\n".format(guild.tag)
    response += get_edit_guild_text(guild)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML', reply_markup=get_edit_guild_buttons(guild))
    return


def request_delete_guild(bot, update):
    mes = update.message
    guild_id = re.search("_(\\d+)", mes.text)
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    guild_id = int(guild_id.group(1))
    guild = Guild.get_guild(guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    buttons = get_delete_guild_buttons(guild)
    bot.send_message(chat_id=mes.chat_id, text="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–∏–ª—å–¥–∏—é <b>{}</b>?\n\n"
                                               "<b>–í–Ω–∏–º–∞–Ω–∏–µ!!! –≠—Ç–æ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ—Ç–µ—Ä–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥–∏–ª—å–¥–∏–∏ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é"
                                               " –ø–∏–Ω–æ–≤ –≤ –∏—Ö —á–∞—Ç–µ!!!</b>".format(guild.tag),
                     parse_mode='HTML', reply_markup=buttons)


def delete_guild(bot, update):
    if not check_access(update.callback_query.from_user.id):
        bot.send_message(chat_id=SUPER_ADMIN_ID,
                         text="@{} (id=<code>{}</code> –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –≥–∏ "
                              "({})".format(update.callback_query.from_user.username,
                                            update.callback_query.from_user.id, update.callback_query.data))
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–∞!")
        return
    guild_id = re.search("_(\\d+)", update.callback_query.data)
    guild_id = int(guild_id.group(1))
    guild = Guild.get_guild(guild_id)
    if guild is None:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    guild.delete_guild()
    try:
        bot.editMessageText(chat_id=update.callback_query.message.chat_id,
                            message_id=update.callback_query.message.message_id,
                            text="–ì–∏–ª—å–¥–∏—è <b>{}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞".format(guild.tag), parse_mode='HTML')
    except TelegramError:
        pass
    guild.fill_guild_ids()


def cancel_delete_guild(bot, update):
    try:
        bot.editMessageText(chat_id=update.callback_query.message.chat_id,
                            message_id=update.callback_query.message.message_id,
                            text="–£–¥–∞–ª–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    except TelegramError:
        pass


# –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞"
def edit_guild_commander(bot, update, user_data):
    try:
        user_data.update({"status": "edit_guild_commander",
                          "edit_guild_id": int(update.callback_query.data.split("_")[1])})
    except ValueError:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –≥–∏–ª—å–¥–∏–∏, "
                                                                             "–∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –í–≤–æ–¥ id –∫–æ–º–∞–Ω–¥–∏—Ä–∞
def change_guild_commander(bot, update, user_data):
    mes = update.message
    try:
        player_id = int(mes.text)
    except ValueError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player = Player.get_player(player_id, notify_on_error=False)
    if player is None:
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ id.")
        return
    guild_id = user_data.get("edit_guild_id")
    guild = None
    if guild_id is not None:
        guild = Guild.get_guild(guild_id=guild_id)
    if guild_id is None or guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    print(player.guild_tag, player.guild_tag, guild.tag)
    if guild.tag == "–ê–ö–ê–î–ï–ú–ò–Ø":
        change_headmaster(bot, update, player, guild, user_data)
        return
    if player.guild_tag is not None and player.guild_tag != guild.tag:
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∏—Ä –º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–π –≥–∏–ª—å–¥–∏–µ–π")

        # return
    if player.guild_tag is None or player.guild is None:
        guild.add_player(player)
    guild.commander_id = player_id
    if player.id not in guild.members:
        guild.add_player(player.id)
    guild.update_to_database()
    if "status" in user_data:
        user_data.pop("status")
    if "edit_guild_id" in user_data:
        user_data.pop("edit_guild_id")
    bot.send_message(chat_id=update.message.chat_id, text="–ö–æ–º–∞–Ω–¥–∏—Ä–æ–º –≥–∏–ª—å–¥–∏–∏ <b>{}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω <b>{}</b> "
                                                          "{}".format(guild.tag, player.nickname,
                                                                      "(@{})".format(player.username)
                                                                      if player.username is not None else ""),
                     parse_mode='HTML')


# –ù–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç –≥–∏–ª—å–¥–∏–∏"
def edit_guild_chat(bot, update, user_data):
    try:
        user_data.update(
            {"status": "edit_guild_chat", "edit_guild_id": int(update.callback_query.data.split("_")[1])})
    except ValueError:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≥–∏–ª—å–¥–∏–∏, "
                                                                             "–∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


# –í–≤–æ–¥ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≥–∏
def change_guild_chat(bot, update, user_data):
    mes = update.message
    try:
        chat_id = int(mes.text)
    except ValueError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    guild_id = user_data.get("edit_guild_id")
    guild = None
    if guild_id is not None:
        guild = Guild.get_guild(guild_id=guild_id)
    if guild_id is None or guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    try:
        message = bot.sync_send_message(chat_id=chat_id, text="–≠—Ç–æ —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –≥–∏–ª—å–¥–∏–∏ "
                                                              "<b>{}</b>".format(guild.tag), parse_mode='HTML')
        chat = bot.getChat(message.chat_id)
        if chat is None:
            bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id "
                                                                  "–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
            return
    except TelegramError:
        bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id "
                                                              "–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        return
    guild.chat_id = chat.id
    guild.chat_name = chat.title
    try:
        guild.invite_link = bot.exportChatInviteLink(chat_id)
        if guild.invite_link is not None:
            guild.invite_link = guild.invite_link[22:]  # –û–±—Ä–µ–∑–∞—é https://t.me/joinchat/
    except TelegramError:
        pass
    guild.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–ß–∞—Ç –≥–∏–ª—å–¥–∏–∏ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω "
                                               "–Ω–∞ <b>{}</b>".format(guild.tag, guild.chat_name or guild.chat_id),
                     parse_mode='HTML')
    if "status" in user_data:
        user_data.pop("status")
    if "edit_guild_id" in user_data:
        user_data.pop("edit_guild_id")


def edit_guild_division(bot, update, user_data):
    try:
        user_data.update(
            {"status": "edit_guild_division", "edit_guild_id": int(update.callback_query.data.split("_")[1])})
    except ValueError:
        bot.send_message(chat_id=update.callback_query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    else:
        bot.send_message(chat_id=update.callback_query.message.chat_id,
                         text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–≤–∏–∑–∏–æ–Ω–∞ –≥–∏–ª—å–¥–∏–∏, –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


def change_guild_division(bot, update, user_data):
    mes = update.message
    guild_id = user_data.get("edit_guild_id")
    guild = None
    if guild_id is not None:
        guild = Guild.get_guild(guild_id=guild_id)
    if guild_id is None or guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    guild.division = mes.text
    guild.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–î–∏–≤–∏–∑–∏–æ–Ω <b>{}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "
                                               "<b>{}</b>".format(guild.tag, guild.division),
                     parse_mode='HTML')
    if "status" in user_data:
        user_data.pop("status")
    if "edit_guild_id" in user_data:
        user_data.pop("edit_guild_id")


def change_guild_bool_state(bot, update):
    if not check_access(update.callback_query.from_user.id):
        return
    try:
        guild_id = int(update.callback_query.data.split("_")[1])
        new = "new" in update.callback_query.data
        page = int(update.callback_query.data.partition("page_")[2]) if new else 0
    except ValueError:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    guild = Guild.get_guild(guild_id)
    if guild is None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    edit_type = update.callback_query.data[2]
    if edit_type == 'o':
        guild.orders_enabled = not guild.orders_enabled
    elif edit_type == 'p':
        guild.pin_enabled = not guild.pin_enabled
    elif edit_type == 'n':
        guild.disable_notification = not guild.disable_notification
    elif edit_type == 'm':
        guild.mailing_enabled = not guild.mailing_enabled
    guild.update_to_database()
    mes = update.callback_query.message
    reply_markup = get_guild_inline_buttons(guild, page) if new else get_edit_guild_buttons(guild)
    new_text = get_edit_guild_text(guild)
    try:
        bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=new_text, reply_markup=reply_markup,
                            parse_mode='HTML')
    except TelegramError:
        pass
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                            text="–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –≤ –ª—Å
def chat_info(bot, update):
    response = "<b>{}</b>, id: <code>{}</code>".format(update.message.chat.title, update.message.chat_id)
    bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')
