"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Inline, –∏–ª–∏ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
"""
from telegram import InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from castle_files.bin.service_functions import check_access
from castle_files.libs.castle.location import Location
from castle_files.libs.player import Player
from castle_files.work_materials.globals import dispatcher, king_id, SUPER_ADMIN_ID


def get_edit_guild_buttons(guild):
    buttons = [
        [
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞", callback_data="gccmdr_{}".format(guild.id)),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç –≥–∏–ª—å–¥–∏–∏", callback_data="gccht_{}".format(guild.id)),
        ],
        [
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–≤–∏–∑–∏–æ–Ω", callback_data="gcdvs_{}".format(guild.id)),
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã" if guild.orders_enabled else "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã",
                                 callback_data="gco_{}".format(guild.id))
        ],
        [
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –ø–∏–Ω—ã" if guild.pin_enabled else "–í–∫–ª—é—á–∏—Ç—å –ø–∏–Ω—ã",
                                 callback_data="gcp_{}".format(guild.id)),
            InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if guild.disable_notification else "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                 callback_data="gcn_{}".format(guild.id)),
        ],
    ]
    return InlineKeyboardMarkup(buttons)


def get_delete_guild_buttons(guild):
    buttons = [
        [
            InlineKeyboardButton("–î–∞", callback_data="g_delete_confirm_{}".format(guild.id)),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="g_delete_cancel_{}".format(guild.id)),
        ]
    ]
    return InlineKeyboardMarkup(buttons)


def get_view_guild_buttons(guild, user_id=None):
    buttons = [
        [
            InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="gipl_{}".format(guild.id)),
            InlineKeyboardButton("–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é", callback_data="gilv_{}".format(guild.id)),
        ],
    ]
    if user_id is not None and guild.check_high_access(user_id):
        buttons.append([
            InlineKeyboardButton("–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏", callback_data="giass_{}".format(guild.id)),
        ])
    return InlineKeyboardMarkup(buttons)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ user_data, –≤ –∫–æ—Ç–æ—Ä–æ–º —á–∏—Ç–∞–µ—Ç –ø–æ–ª–µ "status",
# –¥–∞–ª–µ–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
def get_general_buttons(user_data, player=None, only_buttons=False):
    status = user_data.get("status")
    rp_off = user_data.get("rp_off")
    buttons = None
    if rp_off:
        buttons = [
            [
                KeyboardButton("üëÄ –ü—Ä–æ—Ñ–∏–ª—å"),
                KeyboardButton("üë• –ì–∏–ª—å–¥–∏—è"),
            ]
        ]
    if status is None or status == "default":
        status = "central_square"
        user_data.update({"status": status})
    if status == "central_square":
        buttons = [
            [
                KeyboardButton(Location.get_location(1).name),
                KeyboardButton(Location.get_location(2).name),
                KeyboardButton("‚õ© –í—Ä–∞—Ç–∞ –∑–∞–º–∫–∞"),
                ],
            [
                KeyboardButton("üèö –ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ"),
            ],
            [
                KeyboardButton("‚ÜîÔ∏è –ü–æ–¥–æ–π—Ç–∏ –∫ —É–∫–∞–∑–∞—Ç–µ–ª—è–º"),
                # KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'barracks':
        buttons = [
            [
                KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–µ—Ä–∫–∞–ª–æ"),
                KeyboardButton("üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å –≥–∏–ª—å–¥–∏–∏"),
                ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'throne_room':
        buttons = [
            [
                KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É"),
                KeyboardButton("–ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—É–¥–∏–µ–Ω—Ü–∏–∏ —É üëë–ö–æ—Ä–æ–ª—è"),
                ],
            [
                KeyboardButton("üéá–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç—ã"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        if player is not None and check_access(player.id):
            buttons[1].append(KeyboardButton("–®—Ç–∞–±"))
        if player is not None and player.id in [king_id, SUPER_ADMIN_ID]:
            buttons[1].append(KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –ö–æ—Ä–æ–ª—è"))
    elif status in ['mid_feedback', 'duty_feedback', 'sending_guild_message',
                    'editing_debrief', 'changing_castle_message']:
        buttons = [
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'castle_gates':
        on_duty = user_data.get("on_duty")
        print(on_duty, user_data)
        if on_duty:
            buttons = [
                [
                    KeyboardButton("–ü–æ–∫–∏–Ω—É—Ç—å –≤–∞—Ö—Ç—É"),
                ],
            ]
        else:
            buttons = [
                [
                    KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ üíÇ‚Äç‚ôÇ–°—Ç—Ä–∞–∂–∞–º"),
                ],
                [
                    KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
                ]
            ]
            print(player, player.game_class if player is not None else "")
            if player is not None and player.game_class == "Sentinel":  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–∂–µ–π, –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
                buttons[0].append(KeyboardButton("–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—Ö—Ç—É"))
    elif status == 'king_cabinet':
        buttons = [
            [
                KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞–ª–∞"),
                KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'headquarters':
        buttons = [
            [
                KeyboardButton("üìú–í—ã–∫–∞—Ç–∏—Ç—å –¥–µ–±—Ä–∏—Ñ"),
                KeyboardButton("üì£–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–∏–ª—å–¥–∏—è–º"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    if only_buttons:
        return buttons
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def get_text_to_general_buttons(user_data):
    status = user_data.get("status")
    location_id = user_data.get("location_id")
    rp_off = user_data.get("rp_off")
    if location_id is None:
        user_data.update({"location_id": 0})
    if rp_off:
        return "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if status is None or status == "default":
        return "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –∑–∞–º–æ–∫ –°–∫–∞–ª—ã. –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!"
    if location_id is not None:
        return Location.get_location_enter_text_by_id(location_id)


def send_general_buttons(user_id, user_data, bot=None):
    if bot is None:
        bot = dispatcher.bot
    player = Player.get_player(user_id)
    bot.send_message(chat_id=user_id, text=get_text_to_general_buttons(user_data),
                     reply_markup=get_general_buttons(user_data, player=player), parse_mode='HTML')
