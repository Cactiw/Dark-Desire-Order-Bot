"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Inline, –∏–ª–∏ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
"""
from telegram import InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from castle_files.bin.service_functions import check_access

from castle_files.libs.castle.location import Location, status_to_location
from castle_files.libs.player import Player
from castle_files.libs.guild import Guild
from castle_files.libs.alliance import Alliance

from castle_files.work_materials.globals import dispatcher, king_id, SUPER_ADMIN_ID, construction_jobs


def get_profile_buttons(player, whois_access=False, self_request=False):
    buttons = [
        [
            InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –≥–∏–ª—å–¥–∏–π", callback_data="pr_guild_history_{}".format(player.id)),
        ],
    ]
    if whois_access:
        buttons[0].append(InlineKeyboardButton("–†–µ–ø–æ—Ä—Ç—ã",
                                               callback_data="pr_reports_history_{}".format(player.id)),)
    if self_request:
        buttons.append([
            InlineKeyboardButton("üî•–û–ø—ã—Ç", callback_data="pr_exp_{}".format(player.id)),
            InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="pr_settings_{}".format(player.id)),
        ])
    return InlineKeyboardMarkup(buttons)


def get_profile_settings_buttons(player):
    buttons = [
        [
            InlineKeyboardButton("üõí–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ", callback_data="prssoldnotify_{}".format(player.id)),
            InlineKeyboardButton("üì¶–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∫–∞", callback_data="prsstocknotify_{}".format(player.id)),
        ],
        [
            InlineKeyboardButton("üìå–ü–∏–Ω–≥ –Ω–∞ –º–æ–±–æ–≤", callback_data="prsmobsping_{}".format(player.id)),
        ],
    ]
    # if player.game_class == 'Ranger' and player.class_skill_lvl is not None:
    if player.class_skill_lvl is not None:
        buttons[1].append(InlineKeyboardButton("üìå–ü–∏–Ω–≥ –Ω–∞ –∞–∏–º", callback_data="prsaimping_{}".format(player.id)))
    return InlineKeyboardMarkup(buttons)


def get_edit_guild_buttons(guild):
    buttons = [
        [
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞", callback_data="gccmdr_{}".format(guild.id)),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç –≥–∏–ª—å–¥–∏–∏", callback_data="gccht_{}".format(guild.id)),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–≤–∏–∑–∏–æ–Ω", callback_data="gcdvs_{}".format(guild.id)),
        ],
        [
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å /mailing" if guild.mailing_enabled else "–í–∫–ª—é—á–∏—Ç—å /mailing",
                                 callback_data="gcm_{}".format(guild.id)),
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã" if guild.orders_enabled else "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã",
                                 callback_data="gco_{}".format(guild.id)),
        ],
        [
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –ø–∏–Ω—ã" if guild.pin_enabled else "–í–∫–ª—é—á–∏—Ç—å –ø–∏–Ω—ã",
                                 callback_data="gcp_{}".format(guild.id)),
            InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if guild.disable_notification else "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                 callback_data="gcn_{}".format(guild.id)),
        ],
    ]
    return InlineKeyboardMarkup(buttons)


def get_guild_inline_buttons(guild: Guild, page):
    commander = Player.get_player(guild.commander_id) if guild.commander_id is not None else "–ù–µ—Ç"
    buttons = [
        [
            InlineKeyboardButton(
                text="üéó:{} @{} ‚öîÔ∏è{}üõ°{}".format(
                    commander.nickname, commander.username, commander.attack, commander.defense) if
                    isinstance(commander, Player) else "–ù–µ—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–∞", callback_data="gccmdr_{}".format(guild.id))
        ],
        [
            InlineKeyboardButton("–ß–∞—Ç: {}".format(guild.chat_name or "–ù–µ—Ç"), callback_data="gccht_{}".format(guild.id)),
        ],
        [
            InlineKeyboardButton("–î–∏–≤–∏–∑–∏–æ–Ω: {}".format(guild.division),
                                 callback_data="guild_change_division_{}_page_{}".format(guild.id, page))
        ],
        [
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å /mailing" if guild.mailing_enabled else "–í–∫–ª—é—á–∏—Ç—å /mailing",
                                 callback_data="gcm_{}_new_page_{}".format(guild.id, page)),
        ],
        [
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã" if guild.orders_enabled else "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã",
                                 callback_data="gco_{}_new_page_{}".format(guild.id, page)),
        ],
        [
            InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –ø–∏–Ω—ã" if guild.pin_enabled else "–í–∫–ª—é—á–∏—Ç—å –ø–∏–Ω—ã",
                                 callback_data="gcp_{}_new_page_{}".format(guild.id, page)),
        ],
        [
            InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if guild.disable_notification else "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                 callback_data="gcn_{}_new_page_{}".format(guild.id, page)),
        ],

        [
            InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="guilds_divisions_page_{}".format(page))
        ]
    ]
    return InlineKeyboardMarkup(buttons)


def get_alliance_inline_buttons(alliance: Alliance):
    buttons = [
        [
            InlineKeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º", callback_data="ga_stats_{}".format(alliance.id)),
        ],
    ]
    return buttons



def get_delete_guild_buttons(guild):
    buttons = [
        [
            InlineKeyboardButton("–î–∞", callback_data="g_delete_confirm_{}".format(guild.id)),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="g_delete_cancel_{}".format(guild.id)),
        ]
    ]
    return InlineKeyboardMarkup(buttons)


def get_view_guild_buttons(guild, user_id=None):
    buttons = [
        [
            InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="gipl_{}".format(guild.id)),
            InlineKeyboardButton("üè∑–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data="gieq_{}".format(guild.id)),
            InlineKeyboardButton("–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é", callback_data="gilv_{}".format(guild.id)),
        ],
    ]
    if user_id is not None and guild.check_high_access(user_id):
        buttons.insert(0, [
            InlineKeyboardButton("–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏", callback_data="giass_{}".format(guild.id)),
            InlineKeyboardButton("–†–µ–ø–æ—Ä—Ç—ã", callback_data="girep_{}".format(guild.id)),
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="giset_{}".format(guild.id)),
        ])
    return InlineKeyboardMarkup(buttons)


def get_guild_settings_buttons(guild):
    buttons = [
        [
            InlineKeyboardButton("{} –≤—ã–¥–∞—á—É —Ä–µ—Å—É—Ä—Å–æ–≤".format("–û—Ç–∫–ª—é—á–∏—Ç—å" if guild.settings is not None and
                                                             guild.settings.get("withdraw") else "–í–∫–ª—é—á–∏—Ç—å"),
                                 callback_data="gswith_{}".format(guild.id)),
            InlineKeyboardButton("{} —Å–Ω—è—Ç–∏–µ –ø–∏–Ω–∞".format("–û—Ç–∫–ª—é—á–∏—Ç—å" if guild.settings is not None and
                                                         guild.settings.get("unpin") else "–í–∫–ª—é—á–∏—Ç—å"),
                                 callback_data="gsunpin_{}".format(guild.id)),
        ],
        [
            InlineKeyboardButton("{} –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –≤ 12".format("–û—Ç–∫–ª—é—á–∏—Ç—å" if guild.settings is not None and
                                                              guild.settings.get("arena_notify") else "–í–∫–ª—é—á–∏—Ç—å"),
                                 callback_data="gsarenanotify_{}".format(guild.id)),
            InlineKeyboardButton("{} –ø–∏–Ω–≥–∏ –∫ –±–∏—Ç–≤–µ".format("–û—Ç–∫–ª—é—á–∏—Ç—å" if guild.settings is not None and
                                                           guild.settings.get("battle_notify") else "–í–∫–ª—é—á–∏—Ç—å"),
                                 callback_data="gsbattlenotify_{}".format(guild.id)),
        ]
    ]
    return InlineKeyboardMarkup(buttons)


def get_update_history_buttons(update_id, last_update_id):
    buttons = [[]]
    if update_id != 1:
        buttons[0].append(InlineKeyboardButton("‚¨ÖÔ∏èÔ∏è", callback_data="uhl_{}".format(update_id)))
    if update_id != last_update_id:
        buttons[0].append(InlineKeyboardButton("‚û°Ô∏èÔ∏è", callback_data="uhr_{}".format(update_id)))
    return InlineKeyboardMarkup(buttons)


def get_tops_buttons(stat, curr='all'):
    buttons = [
        [
            InlineKeyboardButton("{}–í–°–ï".format('‚úÖ' if curr == 'all' else ""), callback_data="top_{}_all".format(stat)),
            InlineKeyboardButton("{}‚öóÔ∏è".format('‚úÖ' if curr == '‚öóÔ∏è' else ""), callback_data="top_{}_‚öóÔ∏è".format(stat)),
            InlineKeyboardButton("{}‚öí".format('‚úÖ' if curr == '‚öí' else ""), callback_data="top_{}_‚öí".format(stat)),
        ],
        [
            InlineKeyboardButton("{}üì¶".format('‚úÖ' if curr == 'üì¶' else ""), callback_data="top_{}_üì¶".format(stat)),
            InlineKeyboardButton("{}üèπ".format('‚úÖ' if curr == 'üèπ' else ""), callback_data="top_{}_üèπ".format(stat)),
            InlineKeyboardButton("{}‚öîÔ∏è".format('‚úÖ' if curr == '‚öîÔ∏è' else ""), callback_data="top_{}_‚öîÔ∏è".format(stat)),
            InlineKeyboardButton("{}üõ°".format('‚úÖ' if curr == 'üõ°' else ""), callback_data="top_{}_üõ°".format(stat)),
        ]
    ]
    return InlineKeyboardMarkup(buttons)


def get_roulette_tops_buttons(curr=""):
    buttons = [
        [
            InlineKeyboardButton("{}üîò–í—ã–∏–≥—Ä–∞–Ω–æ".format('‚úÖ' if curr == 'roulette_won' else ""),
                                 callback_data="roulette_top_won"),
            InlineKeyboardButton("{}üèÜ–ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ".format('‚úÖ' if curr == 'roulette_games_won' else ""),
                                 callback_data="roulette_top_games_won"),
            InlineKeyboardButton("{}üé∞–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ".format('‚úÖ' if curr == 'roulette_games_played' else ""),
                                 callback_data="roulette_top_games_played"),
        ]
    ]
    return InlineKeyboardMarkup(buttons)


def get_craft_buttons(code, count, explicit=True):
    buttons = [
        [
            InlineKeyboardButton("üì¶–í—ã–¥–∞—Ç—å –≤—Å—ë", callback_data="craft_withdraw_{}_{}".format(code, count)),
            InlineKeyboardButton("üí∞–ö—É–ø–∏—Ç—å –≤—Å—ë", callback_data="craft_buy_{}_{}".format(code, count)),
        ],
        [
            InlineKeyboardButton("{} —Ä–µ—Å—É—Ä—Å—ã –≤ –Ω–∞–ª–∏—á–∏–∏".format("‚¨Ü–°–∫—Ä—ã—Ç—å" if explicit else "‚¨á–ü–æ–∫–∞–∑–∞—Ç—å"),
                                 callback_data="craft_{}_{}_{}".format("fewer" if explicit else "more", code, count))
        ],[
            InlineKeyboardButton("‚öí–ö—Ä–∞—Ñ—Ç!", callback_data="craft_go_{}_{}".format(code, count))
        ],
    ]
    return InlineKeyboardMarkup(buttons)


def get_vote_buttons(vote, choice=None):
    buttons = []
    for i, var in enumerate(vote.variants):
        buttons.append([InlineKeyboardButton(text=var, callback_data="vote_{}_{}".format(vote.id, i))])
    if choice is not None:
        buttons[choice][0].text = '‚úÖ' + buttons[choice][0].text
    return InlineKeyboardMarkup(buttons)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ user_data, –≤ –∫–æ—Ç–æ—Ä–æ–º —á–∏—Ç–∞–µ—Ç –ø–æ–ª–µ "status",
# –¥–∞–ª–µ–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
def get_general_buttons(user_data, player=None, only_buttons=False):
    status = user_data.get("status")
    rp_off = user_data.get("rp_off")
    buttons = None
    if rp_off and status in ["central_square", "rp_off"]:
        buttons = [
            [
                KeyboardButton("üëÄ –ü—Ä–æ—Ñ–∏–ª—å"),
                KeyboardButton("üë• –ì–∏–ª—å–¥–∏—è"),
                KeyboardButton("üìà–¢–æ–ø—ã"),
            ],
            [
                KeyboardButton("üîñ–°–≤—è–∑—å —Å –ú–ò–î"),
                KeyboardButton("üóÇ–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
                KeyboardButton("üì∞–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
            ]
        ]
        if player is not None:
            if player.guild is not None:
                guild = Guild.get_guild(player.guild)
                if guild is not None:
                    if guild.check_high_access(player.id):
                        pass
                        # buttons[0].append(KeyboardButton("üìú–°–ø–∏—Å–æ–∫ –≥–∏–ª—å–¥–∏–π"))
    elif status is None or status in ["default", "central_square"]:
        status = "central_square"
        user_data.update({"status": status})
        buttons = [
            [
                KeyboardButton(Location.get_location(1).name),
                KeyboardButton(Location.get_location(2).name),
                KeyboardButton("‚õ© –í—Ä–∞—Ç–∞ –∑–∞–º–∫–∞"),
                ],
            [
                KeyboardButton("üî≠ –ë–∞—à–Ω—è –¢–µ—Ö–ú–∞–≥ –Ω–∞—É–∫"),  # ‚ùó
                KeyboardButton("üè§–ú–∞–Ω–¥–∞–ø–∞ –°–ª–∞–≤—ã"),
                # KeyboardButton("üìà–¢–æ–ø—ã"),
                # KeyboardButton("üèö –ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ"),
            ],
            [
                KeyboardButton("‚ÜîÔ∏è –ü–æ–¥–æ–π—Ç–∏ –∫ —É–∫–∞–∑–∞—Ç–µ–ª—è–º"),
                KeyboardButton("üèö –°—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∞"),
                # KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        # –°—Ç—Ä–æ–π–∫–∞ –ú–∞–Ω–¥–∞–ø—ã –°–ª–∞–≤—ã –æ–∫–æ–Ω—á–µ–Ω–∞
        # hall = Location.get_location(8)
        # if hall is not None and hall.is_constructed():
        #     buttons[1].insert(1, KeyboardButton("üè§–ú–∞–Ω–¥–∞–ø–∞ –°–ª–∞–≤—ã"))

        tea_party = Location.get_location(9)
        if tea_party is not None and tea_party.is_constructed():
            buttons[1].insert(2, KeyboardButton("üçµ–ß–∞–π–Ω–∞—è –ª–∏–≥–∞"))

    elif status == 'barracks':
        buttons = [
            [
                KeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–µ—Ä–∫–∞–ª–æ"),
                KeyboardButton("üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å –≥–∏–ª—å–¥–∏–∏"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        if player is not None:
            if player.guild is not None:
                guild = Guild.get_guild(player.guild)
                if guild is not None:
                    if guild.alliance_id is not None:
                        buttons.insert(1, [KeyboardButton(" ü§ù–ê–ª—å—è–Ω—Å")])
                    if guild.check_high_access(player.id):
                        pass
                        # buttons.insert(1, [KeyboardButton("üìú–ò–∑—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–∏–ª—å–¥–∏–π")])
    elif status == 'throne_room':
        buttons = [
            [
                KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É"),
                KeyboardButton("–ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—É–¥–∏–µ–Ω—Ü–∏–∏ —É üëë–ö–æ—Ä–æ–ª—è"),
                ],
            [
                KeyboardButton("üéá–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç—ã"),
                # KeyboardButton("üí∞–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        if player is not None and check_access(player.id):
            buttons[1].append(KeyboardButton("–®—Ç–∞–±"))
        if player is not None and player.id in [king_id, SUPER_ADMIN_ID]:
            buttons[1].append(KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –ö–æ—Ä–æ–ª—è"))
    elif status in ['mid_feedback', 'duty_feedback', 'sending_guild_message', 'editing_debrief',
                    'changing_castle_message', 'sending_bot_guild_message', 'editing_update_message', "treasury",
                    "awaiting_roulette_bet"]:
        buttons = [
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status in ["sawmill", "quarry", "construction", "exploration", "pit"]:
        buttons = [
            [
                KeyboardButton("üëÄ –ü—Ä–æ—Ñ–∏–ª—å"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞"),
            ]
        ]
    elif status == 'castle_gates':
        on_duty = user_data.get("on_duty")
        print(on_duty, user_data)
        if on_duty:
            buttons = [
                [
                    KeyboardButton("–ü–æ–∫–∏–Ω—É—Ç—å –≤–∞—Ö—Ç—É"),
                ],
            ]
        else:
            buttons = [
                [
                    KeyboardButton("üå≤–õ–µ—Å–æ–ø–∏–ª–∫–∞"),
                    KeyboardButton("‚õ∞–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è"),
                ],
                [
                    KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ üíÇ‚Äç‚ôÇ–°—Ç—Ä–∞–∂–∞–º"),
                ],
                [
                    KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
                ]
            ]
            print(player, player.game_class if player is not None else "")
            if player is not None and player.game_class == "Sentinel":  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–∂–µ–π, –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
                buttons[0].append(KeyboardButton("–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—Ö—Ç—É"))
    elif status == 'king_cabinet':
        buttons = [
            [
                KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞–ª–∞"),
                KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ],
            [
                KeyboardButton("–ù–∞—á–∞—Ç—å —Å—Ç—Ä–æ–π–∫—É"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'headquarters':
        buttons = [
            [
                KeyboardButton("üìú–í—ã–∫–∞—Ç–∏—Ç—å –¥–µ–±—Ä–∏—Ñ"),
                KeyboardButton("üì£–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–∏–ª—å–¥–∏—è–º"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'technical_tower':
        buttons = [
            [
                # KeyboardButton("üîñ–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–∞–≥—É"),
                KeyboardButton("üì∞–ú–∞–Ω—É—Å–∫—Ä–∏–ø—Ç"),
                KeyboardButton("üóÇ–ê—Ä—Ö–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"),
            ],
            [
                KeyboardButton("üßæ–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        if player is not None and player.id == SUPER_ADMIN_ID:
            buttons[1].insert(1, KeyboardButton("üíª–ö–∞–±–∏–Ω–µ—Ç –±–æ—Ç–æ–¥–µ–ª–∞"))
    elif status == 'my_cabinet':
        buttons = [
            [
                KeyboardButton("üìà–í—ã–∫–∞—Ç–∏—Ç—å –æ–±–Ω–æ–≤—É"),
                KeyboardButton("üì£–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–∏–ª—å–¥–∏—è–º"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'construction_plate':
        location = Location.get_location(status_to_location.get(status))
        buttons = location.buttons
    elif status == 'hall_of_fame':
        buttons = [
            [
                KeyboardButton("üìà–¢–æ–ø—ã"),
                # KeyboardButton("üì£–ï—â—ë –∫–Ω–æ–ø–∫–∞, —Ö–∑ —á—Ç–æ"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'tops':
        buttons = [
            [
                KeyboardButton("‚öîÔ∏è–ê—Ç–∞–∫–∞"),
                KeyboardButton("üõ°–ó–∞—â–∏—Ç–∞"),
                KeyboardButton("üî•–û–ø—ã—Ç"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        if not rp_off:
            buttons.insert(1, [
                KeyboardButton("üå≤–î–µ—Ä–µ–≤–æ"),
                KeyboardButton("‚õ∞–ö–∞–º–µ–Ω—å"),
                KeyboardButton("üèö–°—Ç—Ä–æ–π–∫–∞"),
            ])
    elif status == 'manuscript':
        buttons = [
            [
                KeyboardButton("üë§–ò–≥—Ä–æ–∫–∏"),
                KeyboardButton("üë•–ì–∏–ª—å–¥–∏–∏"),
                KeyboardButton("üìì–ì–∞–π–¥—ã"),
            ],
            [
                KeyboardButton("üñã–¢—Ä–∏–≥–≥–µ—Ä—ã"),
                KeyboardButton("üì¶–°—Ç–æ–∫"),
                # KeyboardButton("üè†–ü—Ä–æ—Ñ—Å–æ—é–∑—ã"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
        if not rp_off:
            buttons[1].insert(0, KeyboardButton("‚ÜîÔ∏è–£–∫–∞–∑–∞—Ç–µ–ª–∏"))
    elif status == 'guides':
        buttons = [
            [
                KeyboardButton("‚öóÔ∏è–ê–ª—Ö–∏–º–∏–∫"),
                KeyboardButton("‚öí–ö—É–∑–Ω–µ—Ü"),
                KeyboardButton("üì¶–î–æ–±—ã—Ç—á–∏–∫"),
            ],
            [
                KeyboardButton("üèπ–õ—É—á–Ω–∏–∫"),
                KeyboardButton("‚öî–†—ã—Ü–∞—Ä—å"),
                KeyboardButton("üõ°–ó–∞—â–∏—Ç–Ω–∏–∫"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ]
        ]
    elif status == 'tea_party':
        buttons = [
            # [
            # KeyboardButton("–†–∞–∑–≤–µ–¥–∫–∞"),
            # KeyboardButton("–†—ã—Ç—å –∫–æ—Ç–ª–æ–≤–∞–Ω"),
            # ],
            [
                KeyboardButton("üé∞–†—É–ª–µ—Ç–∫–∞"),
                KeyboardButton("üí≤–ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∞—Ç—É—Å–æ–≤"),
            ],
            [
                KeyboardButton("üß≥–ö–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥–∏—Å—Ç"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
            ],
        ]
    elif status == 'roulette':
        buttons = [
            [
                KeyboardButton("üî∏–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"),
                KeyboardButton("üìà–¢–æ–ø—ã –≤ —Ä—É–ª–µ—Ç–∫–µ"),
            ],
            [
                KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
            ],
        ]
    if only_buttons or buttons is None:
        return buttons
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def get_text_to_general_buttons(user_data, player=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Å—Ç–∞—Ç—É—Å–æ–º –≤ user_data
    :param user_data: –°–ª–æ–≤–∞—Ä—å user_data, —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è 'status' –∏ 'rp_off'
    :param player: Player
    :return: Str
    """
    status = user_data.get("status")
    location_id = user_data.get("location_id")
    rp_off = user_data.get("rp_off")
    if location_id is None:
        user_data.update({"location_id": 0})
    print(rp_off, status)
    if rp_off and status in ["central_square", "rp_off"]:
        return "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if status is None or status == "default":
        return "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –∑–∞–º–æ–∫ –°–∫–∞–ª—ã. –í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!"
    if status in ["construction", "sawmill", "quarry"]:
        if player is not None:
            j = construction_jobs.get(player.id)
            if j is not None:
                seconds_left = j.get_time_left()
                return "–í—ã –∑–∞–Ω—è—Ç—ã –¥–µ–ª–æ–º. –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑ <b>{:02.0f}:{:02.0f}</b>".format(seconds_left // 60,
                                                                                          (seconds_left % 60) // 1)
    if location_id is not None:
        return Location.get_location_enter_text_by_id(location_id, player=player)


def send_general_buttons(user_id, user_data, bot=None):
    if bot is None:
        bot = dispatcher.bot
    player = Player.get_player(user_id)
    bot.send_message(chat_id=user_id, text=get_text_to_general_buttons(user_data, player=player),
                     reply_markup=get_general_buttons(user_data, player=player), parse_mode='HTML')
