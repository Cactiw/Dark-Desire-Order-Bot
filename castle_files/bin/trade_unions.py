from castle_files.work_materials.globals import cursor, castles, CASTLE_BOT_ID
from castle_files.libs.bot_async_messaging import MAX_MESSAGE_LENGTH

from castle_files.libs.player import Player
from castle_files.libs.trade_union import TradeUnion

from telegram.error import TelegramError
import re
import logging
import traceback

union_chats = {}


def add_union(bot, update):
    mes = update.message
    name = re.search(" (.*)", mes.text)
    creator_nick = re.search("üèÖOwner:['üçÜüçÅ‚òòüåπüê¢ü¶áüñ§](.*)", mes.text)
    if name is None:
        bot.send_message(chat_id=mes.chat_id, text="–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏")
        return
    if creator_nick is None:
        bot.send_message(chat_id=mes.chat_id, text="–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∏–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è")
        return
    name = name.group(1)
    creator_nick = creator_nick.group(1)
    request = "select id from players where nickname = %s"
    cursor.execute(request, (creator_nick,))
    row = cursor.fetchone()
    if row is None:
        bot.send_message(chat_id=mes.chat_id, text="–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. "
                                                   "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        # return
    creator = Player.get_player(row[0], notify_on_error=False)
    view_link = re.search("View: /tu_view_(.*)", mes.text)
    view_link = view_link.group(1) if view_link is not None else None
    request = "select id from trade_unions where name = %s"
    cursor.execute(request, (name,))
    row = cursor.fetchone()
    if row is not None:
        bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ—Ç –ø—Ä–æ—Ñ—Å–æ—é–∑ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return
    request = "insert into trade_unions(creator_id, name, players, view_link) values (%s, %s, %s, %s)"
    cursor.execute(request, (creator.id, name, [creator.id], view_link))
    bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ—Ñ—Å–æ—é–∑ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!".format(name),
                     parse_mode='HTML')


def union_list(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–∞–≤.")
        return
    for string in update.message.text.splitlines():
        if string[0] in castles:
            request = "select id from players where nickname = %s"
            cursor.execute(request, (string[1:],))
            row = cursor.fetchone()
            if row is None:
                continue
            if row[0] not in union.players:
                union.players.append(row[0])
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–°–ø–∏—Å–æ–∫ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!".format(union.name),
                     parse_mode='HTML')


def print_union_players(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤.")
        return
    response = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ <b>{}</b>:\n"
    for player_id in union.players:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        response_new = "{}<b>{}</b> ‚Äî @{}\n".format(player.castle, player.nickname, player.username)
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def add_union_chat_id(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —á–∞—Ç –ø—Ä–æ—Ñ—Å–æ—é–∑–∞")
        return
    union.chat_id = mes.chat_id
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ <b>{}</b>".format(union.name),
                     parse_mode='HTML')
    fill_union_chats()


def fill_union_chats():
    request = "select name, chat_id from trade_unions where chat_id is not null"
    cursor.execute(request)
    row = cursor.fetchone()
    union_chats.clear()
    while row is not None:
        union_chats.update({row[0]: row[1]})
        row = cursor.fetchone()


def check_and_kick(bot, update):
    mes = update.message
    union = TradeUnion.get_union(chat_id=update.message.chat_id)
    if union is None:
        return
    if mes.from_user.id not in union.players and mes.from_user.id != CASTLE_BOT_ID:
        try:
            bot.kickChatMember(chat_id=mes.chat_id, user_id=update.message.from_user.id)
            bot.send_message(chat_id=mes.chat_id,
                             text="–¢–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º <b>{}</b> —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
                                  "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–∞–≤".format(union.name),
                             parse_mode='HTML')
        except TelegramError:
            logging.error(traceback.format_exc())
