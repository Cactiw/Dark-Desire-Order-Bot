from castle_files.work_materials.globals import cursor, castles, CASTLE_BOT_ID, SUPER_ADMIN_ID
from castle_files.libs.bot_async_messaging import MAX_MESSAGE_LENGTH

from castle_files.libs.player import Player
from castle_files.libs.guild import Guild
from castle_files.libs.trade_union import TradeUnion

from castle_files.libs.bot_async_messaging import MAX_MESSAGE_LENGTH
from castle_files.work_materials.filters.general_filters import filter_is_pm

from telegram.error import TelegramError
import re
import logging
import traceback
import threading

kick_players_from_union = True

union_chats = {}


def add_union(bot, update):
    mes = update.message
    name = re.search("Trade Union: (.*)", mes.text)
    creator_nick = re.search("üèÖOwner:['{}](.*)".format(''.join(castles)), mes.text)
    if name is None:
        bot.send_message(chat_id=mes.chat_id, text="–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏")
        return
    if creator_nick is None:
        bot.send_message(chat_id=mes.chat_id, text="–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∏–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è")
        return
    name = name.group(1)
    creator_nick = creator_nick.group(1)
    request = "select id from players where nickname = %s"
    cursor.execute(request, (creator_nick,))
    row = cursor.fetchone()
    if row is None:
        bot.send_message(chat_id=mes.chat_id, text="–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. "
                                                   "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        # return
    creator = Player.get_player(row[0], notify_on_error=False)
    view_link = re.search("View: /tu_view_(.*)", mes.text)
    view_link = view_link.group(1) if view_link is not None else None
    request = "select id from trade_unions where name = %s"
    cursor.execute(request, (name,))
    row = cursor.fetchone()
    if row is not None:
        bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ—Ç –ø—Ä–æ—Ñ—Å–æ—é–∑ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return
    request = "insert into trade_unions(creator_id, name, players, view_link) values (%s, %s, %s, %s)"
    cursor.execute(request, (creator.id, name, [creator.id], view_link))
    bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ—Ñ—Å–æ—é–∑ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!".format(name),
                     parse_mode='HTML')
    
    
def add_union_assistant(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–æ–≤.")
        return
    new_id = re.search(" (\\d+)", mes.text)
    if new_id is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    new_id = int(new_id.group(1))
    if new_id not in union.players:
        bot.send_message(chat_id=update.message.chat_id, text="–ó–∞–º–æ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞.")
        return
    if new_id in union.assistants:
        bot.send_message(chat_id=update.message.chat_id, text="–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º.")
        return
    union.assistants.append(new_id)
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


def del_union_assistant(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–º–æ–≤.")
        return
    new_id = re.search(" (\\d+)", mes.text)
    if new_id is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    new_id = int(new_id.group(1))
    if new_id not in union.assistants:
        bot.send_message(chat_id=update.message.chat_id, text="–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º.")
        return
    union.assistants.remove(new_id)
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")


def union_list(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–∞–≤.")
        return
    for string in update.message.text.splitlines():
        if string[0] in castles:
            request = "select id from players where nickname = %s"
            cursor.execute(request, (string[1:].partition(" /")[0],))
            row = cursor.fetchone()
            if row is None:
                continue
            if row[0] not in union.players:
                union.players.append(row[0])
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–°–ø–∏—Å–æ–∫ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!".format(union.name),
                     parse_mode='HTML')


def count_union_stats(bot, update):
    mes = update.message
    if not filter_is_pm(mes):
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å, —á—Ç–æ–±—ã –Ω–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –ª—é–¥–µ–π.",
                         reply_to_message_id=mes.message_id)
        return
    union = TradeUnion.get_union(creator_id=mes.from_user.id)
    if union is None:
        bot.send_message(chat_id=mes.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–∞–≤.")
        return
    attack = 0
    defense = 0
    count = 0
    for player_id in union.players:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        attack += player.attack
        defense += player.defense
        count += 1
    response = "–°—É–º–º–∞—Ä–Ω—ã–µ —Å—Ç–∞—Ç—ã –ø–æ <b>{}</b>:\n‚öîÔ∏è: <code>{}</code>, üõ°: <code>{}</code>\n" \
               "–í—Å–µ–≥–æ –ª—é–¥–µ–π: <code>{}</code>".format(union.name, attack, defense, count)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def split_union(bot, update):
    mes = update.message
    args = mes.text.split()[1:]
    if not filter_is_pm(mes):
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å, —á—Ç–æ–±—ã –Ω–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –ª—é–¥–µ–π.",
                         reply_to_message_id=mes.message_id)
        return
    union = TradeUnion.get_union(creator_id=mes.from_user.id)
    if union is None:
        bot.send_message(chat_id=mes.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–∞–≤.")
        return
    players = []
    total_stats = 0
    attr = "attack" if "attack" in mes.text else "defense"
    alt = "alt" in mes.text
    for player_id in union.players:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        players.append(player)
        total_stats += player.__getattribute__(attr)
    try:
        ratios = args[0].split(":")
        need_stats = []  # –°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–æ–≤ –≤ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å ( —É–∂–µ –≤ –≥–æ—Ç–æ–≤—ã—Ö —á–∏—Å–ª–∞—Ö )
        sum_parts = 0
        player_groups = []
        for part in ratios:
            sum_parts += int(part)
            player_groups.append([])
        for part in ratios:
            need_stats.append(int(part) * total_stats / sum_parts)
    except (ValueError, IndexError):
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    players.sort(key=lambda pl: pl.__getattribute__(attr), reverse=True)
    for player in players:
        # –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–∞—Ç–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ, > 0 –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ç—É–¥–∞
        min_stats_remain = 10000000000 if not alt else -1
        min_stats_remain_num = -1
        max_under_zero_stats_remain = -10000000000
        max_under_zero_stats_remain_num = -1
        for i, stats in enumerate(need_stats):
            current_remain = stats - player.__getattribute__(attr)
            if (not alt and 0 < current_remain < min_stats_remain) or (alt and 0 < current_remain > min_stats_remain):
                min_stats_remain_num = i
                min_stats_remain = current_remain
            elif max_under_zero_stats_remain < current_remain < 0:
                max_under_zero_stats_remain_num = i
                max_under_zero_stats_remain = current_remain
        if min_stats_remain_num >= 0:  # –ù–∞—à–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player_groups[min_stats_remain_num].append(player)
            need_stats[min_stats_remain_num] -= player.__getattribute__(attr)
        else:
            # –ó–∞–∫–∏–¥—ã–≤–∞–µ–º –≤ –≥—Ä—É–ø–ø—É, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑–æ–≤–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–∏
            player_groups[max_under_zero_stats_remain_num].append(player)
            need_stats[max_under_zero_stats_remain_num] -= player.__getattribute__(attr)
    response = "–†–∞—Å—Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:\n"
    full = "full" in mes.text
    for i, group in enumerate(player_groups):
        response += "–ì—Ä—É–ø–ø–∞ {}:\n".format(i)
        sum_stats = 0
        for player in group:
            if full:
                response_new = "<b>{}</b> ‚Äî @{} {}<code>{}</code>" \
                               "\n".format(player.nickname, player.username, "‚öîÔ∏è" if attr == "attack" else "üõ°",
                                           player.__getattribute__(attr))
            else:
                response_new = "@{}\n".format(player.username)
            if len(response + response_new) > MAX_MESSAGE_LENGTH - 100:
                bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
                response = ""
            response += response_new
            sum_stats += player.__getattribute__(attr)
        if full:
            response += "–í—Å–µ–≥–æ –≤ –≥—Ä—É–ø–ø–µ {}: <code>{}</code>\n\n".format("‚öîÔ∏è" if attr == "attack" else "üõ°", sum_stats)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def top_union_stats(bot, update):
    mes = update.message
    MAX_PLAYERS_PRINT = 20
    if not filter_is_pm(mes):
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å, —á—Ç–æ–±—ã –Ω–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –ª—é–¥–µ–π.",
                         reply_to_message_id=mes.message_id)
        return
    union = TradeUnion.get_union(creator_id=mes.from_user.id)
    if union is None:
        bot.send_message(chat_id=mes.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–∞–≤.")
        return
    players = []
    for player_id in union.players:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        players.append(player)
    if "attack" in mes.text:
        players.sort(key=lambda x: x.attack, reverse=True)
    else:
        players.sort(key=lambda x: x.defense, reverse=True)
    count = 1
    response = "–¢–æ–ø—ã —Å—Ç–∞—Ç–æ–≤ –ø–æ <b>{}</b>:\n".format(union.name)
    for player in players:
        response += "{}: <b>{}</b> {}<code>{}</code> @{}" \
                    "\n".format(count, player.nickname, "‚öî:" if "attack" in mes.text else "üõ°:",
                                player.attack if "attack" in mes.text else player.defense, player.username)
        if count >= MAX_PLAYERS_PRINT:
            break
        count += 1

    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def add_to_union_user_id(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –≤–Ω–æ—Å–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–∞–≤.")
        return
    player_id = re.search(" (\\d+)", mes.text)
    if player_id is None:
        bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player_id = int(player_id.group(1))
    if player_id not in union.players:
        union.players.append(player_id)
        union.update_to_database()
        bot.send_message(chat_id=update.message.chat_id,
                         text="–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑ <b>{}</b>.".format(union.name), parse_mode='HTML')
    else:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–ò–≥—Ä–æ–∫ —É–∂–µ –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–µ <b>{}</b>.".format(union.name), parse_mode='HTML')


def clear_union_list(bot, update):
    global kick_players_from_union
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id, text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ—Å—Ç–∞–≤.")
        return
    union.players = [union.creator_id]
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–°–ø–∏—Å–æ–∫ <b>{}</b> —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. "
                                               "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –∑–∞–Ω–æ–≥–æ.".format(union.name),
                     parse_mode='HTML')
    kick_players_from_union = False
    threading.Timer(function=set_kick_flag, interval=60).start()


def set_kick_flag():
    global kick_players_from_union
    kick_players_from_union = True


def print_union_players(bot, update):
    mes = update.message
    union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤.")
        return
    response = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ <b>{}</b>:\n".format(union.name)
    for player_id in union.players:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        response_new = "{}<b>{}</b> ‚Äî @{} <code>{}</code>\n".format(player.castle, player.nickname, player.username,
                                                                    player.id)
        if len(response + response_new) > MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += response_new
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def add_union_chat_id(bot, update):
    mes = update.message
    if mes.from_user.id == SUPER_ADMIN_ID:
        union = TradeUnion.get_union(union_id=1)
    else:
        union = TradeUnion.get_union(creator_id=update.message.from_user.id)
    if union is None:
        bot.send_message(chat_id=update.message.chat_id,
                         text="–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∑–∞–º—ã –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —á–∞—Ç –ø—Ä–æ—Ñ—Å–æ—é–∑–∞")
        return
    union.chat_id = mes.chat_id
    union.update_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ <b>{}</b>".format(union.name),
                     parse_mode='HTML')
    fill_union_chats()


def fill_union_chats():
    request = "select name, chat_id from trade_unions where chat_id is not null"
    cursor.execute(request)
    row = cursor.fetchone()
    union_chats.clear()
    while row is not None:
        union_chats.update({row[0]: row[1]})
        row = cursor.fetchone()


def check_and_kick(bot, update):
    if kick_players_from_union is False:
        return
    mes = update.message
    union = TradeUnion.get_union(chat_id=update.message.chat_id)
    if union is None:
        return
    if mes.from_user.id not in union.players and mes.from_user.id != CASTLE_BOT_ID:
        try:
            bot.kickChatMember(chat_id=mes.chat_id, user_id=update.message.from_user.id)
            bot.send_message(chat_id=mes.chat_id,
                             text="–¢–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º <b>{}</b> —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
                                  "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–∞–≤".format(union.name),
                             parse_mode='HTML')
        except TelegramError:
            return
            # logging.error(traceback.format_exc())


def view_guild_players_in_union(bot, update):
    mes = update.message
    if not filter_is_pm(mes):
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å, —á—Ç–æ–±—ã –Ω–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –ª—é–¥–µ–π.",
                         reply_to_message_id=mes.message_id)
        return
    curr_player = Player.get_player(mes.from_user.id)
    if curr_player is None:
        return
    guild_id = curr_player.guild
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                              "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not guild.check_high_access(curr_player.id):
        bot.send_message(chat_id=mes.chat_id, text="–¢–æ–ª—å–∫–æ –∑–∞–º—ã –∏ –≥–º –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    union_name = re.search(" (.*)", mes.text)
    if union_name is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    union_name = union_name.group(1)
    union = TradeUnion.get_union(union_name=union_name)
    if union is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ—Ñ—Å–æ—é–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –µ–≥–æ –∏–º–µ–Ω–∏.")
        return
    not_in_union = []
    response = "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b> –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–µ <b>{}</b>\n".format(guild.tag, union.name)
    for player_id in guild.members:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        if player_id in union.players:
            response += "<b>{}</b> ‚Äî @{}\n".format(player.nickname, player.username)
        else:
            not_in_union.append(player)
    response += "\n–í –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ñ—Å–æ—é–∑–∞—Ö –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ:\n"
    for player in not_in_union:
        response += "<b>{}</b> ‚Äî @{}\n".format(player.nickname, player.username)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def view_guild_unions(bot, update):
    mes = update.message
    if not filter_is_pm(mes):
        bot.send_message(chat_id=mes.chat_id, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª—Å, —á—Ç–æ–±—ã –Ω–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –ª—é–¥–µ–π.",
                         reply_to_message_id=mes.message_id)
        return
    curr_player = Player.get_player(mes.from_user.id)
    if curr_player is None:
        return
    guild_id = curr_player.guild
    if guild_id is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏—é –≤ –∏–≥—Ä–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "
                              "–∫–æ–º–∞–Ω–¥–∏—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥–∏–ª—å–¥–µ–π—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    guild = Guild.get_guild(guild_id=guild_id)
    if guild is None:
        bot.send_message(chat_id=mes.chat_id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if not guild.check_high_access(curr_player.id):
        bot.send_message(chat_id=mes.chat_id, text="–¢–æ–ª—å–∫–æ –∑–∞–º—ã –∏ –≥–º –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    union_id = 1
    union = TradeUnion.get_union(union_id=union_id)
    players_in_unions = {}
    while union is not None:
        union_players_list = []
        players_in_unions.update({union.name: union_players_list})
        for player_id in guild.members:
            player = Player.get_player(player_id, notify_on_error=False)
            if player is None:
                continue
            if player_id in union.players:
                union_players_list.append(player)
        union_id += 1
        union = TradeUnion.get_union(union_id=union_id)
    response = "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b> –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑–∞—Ö\n".format(guild.tag)
    for player_id in guild.members:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            continue
        found = False
        for un, lst in list(players_in_unions.items()):
            if player in lst:
                response += "<b>{}</b> ‚Äî @{} ‚Äî <b>{}</b>\n".format(player.nickname, player.username, un)
                found = True
                break
        if not found:
            response += "<b>{}</b> ‚Äî @{} ‚Äî –ù–ï–¢ –ü–†–û–§–°–û–Æ–ó–ê\n".format(player.nickname, player.username)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')
