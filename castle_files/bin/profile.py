"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–º–∫–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏, –∫–∞–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É, —Ç–∞–∫ –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
(–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏—ë–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ /hero)
"""

from castle_files.work_materials.globals import DEFAULT_CASTLE_STATUS, cursor, moscow_tz
from castle_files.work_materials.equipment_constants import get_equipment_by_code, equipment_names
from castle_files.work_materials.filters.general_filters import filter_is_merc
from castle_files.libs.player import Player
from castle_files.libs.guild import Guild

from castle_files.bin.buttons import send_general_buttons
from castle_files.bin.service_functions import check_access

from castle_files.work_materials.filters.general_filters import filter_is_pm

import re
import logging
import datetime


trade_divisions_access_list = [439637823, 320365073]  # –ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–º –¥–∞–ª –¥–æ—Å—Ç—É–ø –∫ —Ö—É–∏–∑—É –≤ —Å–≤—è–∑–∏ —Å –∞–ª—å—è–Ω—Å–∞–º–∏


def get_profile_text(player, self_request=True):
    response = "<b>{}</b> - –í–æ–∏–Ω {}\n".format(player.nickname, "üñ§–°–∫–∞–ª—ã" if player.castle == 'üñ§' else player.castle)
    response += "{}id: <code>{}</code>\n".format("@{}, ".format(player.username) if player.username is not None else "",
                                                 player.id)
    response += "üèÖ: <code>{}</code>, ‚öî: <code>{}</code>, üõ°: <code>{}</code>\n".format(player.lvl, player.attack,
                                                                                        player.defense)
    guild = Guild.get_guild(guild_id=player.guild) if player.guild is not None else None
    response += "–ì–∏–ª—å–¥–∏—è: {}\n".format("<code>{}</code>".format(guild.tag) if guild is not None else "–Ω–µ—Ç")
    if guild is not None and self_request:
        response += "–ü–æ–∫–∏–Ω—É—Ç—å –≥–∏–ª—å–¥–∏—é: /leave_guild\n"
    response += "\n–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:\n"
    eq_list = list(player.equipment.values())
    for equipment in eq_list:
        if equipment is None:
            continue
        response += "<b>{}</b><code>{}</code><code>{}</code>" \
                    "\n".format(equipment.name, " +{}‚öîÔ∏è ".format(equipment.attack) if equipment.attack != 0 else "",
                                "+{}üõ° ".format(equipment.defense) if equipment.defense != 0 else "")
    response += "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: " \
                "<code>{}</code>".format(player.last_updated.strftime("%d/%m/%y %H:%M:%S") if
                                         player.last_updated is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    return response


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
def profile(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    response = get_profile_text(player)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def view_profile(bot, update):
    mes = update.message
    requested_player_id = mes.from_user.id
    requested_player = Player.get_player(requested_player_id)
    if requested_player is None:
        return
    guild = Guild.get_guild(guild_id=requested_player.guild)
    if not check_access(requested_player_id) and not filter_is_merc(mes) and \
            requested_player_id not in trade_divisions_access_list:
        if guild is None or not guild.check_high_access(requested_player_id):
            bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–∞–≤–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞—Ç—å—Å—è –ª—é–¥—å–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Å–ª—É–∂–∏—Ç—å.",
                             reply_to_message_id=mes.message_id)
            return
    # –î–æ—Å—Ç—É–ø –∫ —Ö—É–∏–∑—É –µ—Å—Ç—å
    if mes.text.startswith("/dok") or mes.text.startswith("/doc"):
        if mes.reply_to_message is not None:
            player_id = mes.reply_to_message.from_user.id
        elif "@" in update.message.text:
            request = "select id from players where username = %s"
            cursor.execute(request, (mes.text.partition("@")[2],))
            row = cursor.fetchone()
            if row is None:
                bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            player_id = row[0]
        else:
            request = "select id from players where nickname = %s or nickname like %s"
            # print(request % mes.text.partition(" ")[2] % "%]" + mes.text.partition(" ")[2])
            cursor.execute(request, (mes.text.partition(" ")[2], "%]" + mes.text.partition(" ")[2]))
            row = cursor.fetchone()
            if row is None:
                bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            player_id = row[0]
    else:
        player_id = re.search("_(\\d+)", mes.text)
        player_id = int(player_id.group(1))
    if player_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player = Player.get_player(player_id)
    if player is None or (mes.text.startswith("/view_profile") and player.guild != guild.id):
        bot.send_message(chat_id=mes.chat_id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if (player.guild is None or player.guild != requested_player.guild) and not check_access(requested_player_id) and\
            not filter_is_merc(mes) and requested_player_id not in trade_divisions_access_list:
        guild = Guild.get_guild(guild_id=player.guild)
        bot.send_message(chat_id=mes.from_user.id,
                         text="–í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ–¥–Ω–∞–∫–æ –µ–≥–æ —Ñ–æ—Ä–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥, —á—Ç–æ –æ–Ω "
                              "—Å–ª—É–∂–∏—Ç {}".format("–≤ –≥–∏–ª—å–¥–∏–∏ <b>{}</b>".format(guild.tag) if guild is not None else
                                                 "–∫–∞–∫ –≤–æ–ª—å–Ω—ã–π –Ω–∞—ë–º–Ω–∏–∫ (–±–µ–∑ –≥–∏–ª—å–¥–∏–∏)"),
                         parse_mode='HTML')
        return
    response = get_profile_text(player, self_request=False)
    bot.send_message(chat_id=mes.from_user.id, text=response, parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ö–∏—Ä–æ –≤ –ª—Å
def hero(bot, update, user_data):
    mes = update.message
    text = mes.text
    castle = text[0]
    if castle != 'üñ§':
        pass
        # –ò–≥—Ä–æ–∫ –Ω–µ –∏–∑ –°–∫–∞–ª—ã
        # bot.send_message(chat_id=mes.from_user.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –∏–∑ –°–∫–∞–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
        # return
    player = Player.get_player(mes.from_user.id, notify_on_error=False)
    if player is None and mes.chat_id != mes.from_user.id:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ —É –±–æ—Ç–∞
        return
    if datetime.datetime.now() - mes.forward_date > datetime.timedelta(seconds=30):
        bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å.", reply_to_message_id=mes.message_id)
        return
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∏—Ä–æ
    guild_tag = re.search("[üçÅ‚òòüñ§üê¢ü¶áüåπüçÜüéñ]\\[(.+)\\]", text)
    if guild_tag:
        guild_tag = guild_tag.group(1)
    nickname = text.splitlines()[0][1:]
    lvl = int(re.search("üèÖ–£—Ä–æ–≤–µ–Ω—å: (\\d+)", text).group(1))
    attack = int(re.search("‚öî–ê—Ç–∞–∫–∞: (\\d+)", text).group(1))
    defense = int(re.search("üõ°–ó–∞—â–∏—Ç–∞: (\\d+)", text).group(1))
    stamina = int(re.search("üîã–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: \\d+/(\\d+)", text).group(1))
    pet = re.search("–ü–∏—Ç–æ–º–µ—Ü:\n.(\\s.+\\(\\d+ lvl\\))", text)
    last_updated = datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)
    if pet:
        pet = pet.group(1)
    # –ü–∞—Ä—Å–∏–Ω–≥ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    print("parsing eq")
    player_equipment = {
        "main_hand": None,
        "second_hand": None,
        "head": None,
        "gloves": None,
        "armor": None,
        "boots": None,
        "cloaks": None
    }
    equip_strings = text.partition("üéΩ–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞")[2].splitlines()[1:]
    for string in equip_strings:
        # clear_name = re.search("\\+?\\d?\\s?(.+?)\\s\\+", string)
        clear_name = re.search("(‚ö°?\\+?\\d*\\s?(.+?))\\s\\+((\\d*)‚öî)?\\s*\\+?(\\d*)üõ°?", string)
        if clear_name is None:
            # logging.warning("Error while parsing item_string\n{}".format(string))
            continue
        else:
            pass
            # logging.info("successful parsed {},, Got: {}".format(string, clear_name.group(1)))
        full_name = clear_name.group(1)
        eq_attack = int(clear_name.group(4)) if clear_name.group(4) is not None and clear_name.group(4) != "" else 0
        eq_defense = int(clear_name.group(5)) if clear_name.group(5) != "" else 0
        clear_name = clear_name.group(2)
        names_list = list(equipment_names.items())
        code = None
        for name, item_code in names_list:
            if name in clear_name:
                code = item_code
                break
        if code is None:
            # logging.warning("Item code is None for item {}".format(clear_name))
            continue
        eq = get_equipment_by_code(code)
        if eq is None:
            logging.warning("Equipment with code {} is None".format(code))
            continue
        eq.name = full_name
        eq.attack = eq_attack
        eq.defense = eq_defense
        player_equipment.update({eq.place: eq})
    if player is None:
        if mes.from_user.username is None:
            bot.send_message(chat_id=mes.chat_id, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                                       "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram")
            return
        player = Player(mes.from_user.id, mes.from_user.username, nickname, guild_tag, None, lvl, attack, defense,
                        stamina, pet, player_equipment, castle=castle, last_updated=last_updated)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–¥
        player.insert_into_database()
        player = player.reload_from_database()

        user_data.update({"status": DEFAULT_CASTLE_STATUS, "location_id": 0})
        bot.send_message(chat_id=mes.chat_id,
                         text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üñ§–°–∫–∞–ª—É, <b>{}</b>!\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–µ "
                              "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç @ChatWarsBot –Ω–∞ –∫–Ω–æ–ø–∫—É \"üèÖ–ì–µ—Ä–æ–π\" (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –¥–ª—è "
                              "–ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–∏—à–∫–∞–º, –æ—Å–æ–±–µ–Ω–Ω–æ —Å—Ç—Ä–∞–∂–Ω–∏–∫–∞–º).\n\n"
                              "<em>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–ø —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π </em>/change_rp.<em> "
                              "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ "
                              "–±–æ—Ç–∞.</em>".format(player.nickname),
                         parse_mode='HTML')
        if filter_is_pm(mes):
            send_general_buttons(mes.from_user.id, user_data)

    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        player.username = mes.from_user.username
        player.nickname = nickname
        player.guild_tag = guild_tag
        player.lvl = lvl
        player.attack = attack
        player.defense = defense
        player.stamina = stamina
        player.pet = pet
        player.equipment = player_equipment
        player.castle = castle
        player.last_updated = last_updated
        player.update()
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω, <b>{}</b>!".format(player.nickname),
                         parse_mode='HTML')
        if player.guild is not None:
            guild = Guild.get_guild(player.guild)
            guild.calculate_attack_and_defense()
            guild.sort_players_by_exp()


def add_class_from_player(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        bot.send_message(chat_id=mes.from_user.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                                        "–ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç @ChatWarsBot –Ω–∞ –∫–æ–º–∞–Ω–¥—É /hero")
        return
    if datetime.datetime.now() - mes.forward_date > datetime.timedelta(seconds=30):
        bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø—Ä–æ—Ñ–∏–ª—å.", reply_to_message_id=mes.message_id)
        return
    game_class = re.search("üñ§{} (\\w+) –°–∫–∞–ª—ã".format(re.escape(player.nickname)), mes.text)
    if game_class is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_to_message_id=mes.message_id)
        return
    game_class = game_class.group(1)
    player.game_class = game_class
    player.update_to_database()
    bot.send_message(chat_id=mes.from_user.id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, <b>{}</b>! –¢–µ–ø–µ—Ä—å —Ç—ã "
                                                    "<b>{}</b>!".format(player.nickname, player.game_class),
                     parse_mode='HTML')


def update_ranger_class_skill_lvl(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    if player.game_class != 'Ranger':
        bot.send_message(chat_id=mes.chat_id,
                         text="–£—á—ë—Ç —É—Ä–æ–≤–Ω—è —Å–∫–∏–ª–ª–æ–≤ –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª—É—á–Ω–∏–∫–∞–º. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–µ "
                              "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç @ChatWarsBot –Ω–∞ –∫–Ω–æ–ø–∫—É \"üèÖ–ì–µ—Ä–æ–π\"")
        return
    class_skill = int(mes.text.partition("Aiming")[0][:-2].split()[-1])
    logging.info("class_skill = {0}".format(class_skill))
    player.class_skill_lvl = class_skill
    player.update()
    bot.send_message(chat_id=mes.from_user.id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–ª–ª–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞, <b>{}</b>".format(player.nickname),
                     parse_mode='HTML')
