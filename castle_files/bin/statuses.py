"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
"""

from castle_files.work_materials.statuses_const import statuses as statuses_const

from castle_files.libs.player import Player

from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import BadRequest

import re

OWN_STATUS_PRICE = 10000


def status_shop(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    response = "–°—Ç–∞—Ç—É—Å—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n"
    player_statuses = player.tea_party_info.get("statuses") or []
    for status_id, status in list(statuses_const.items()):
        name, price = status.get("name"), status.get("price")
        if status not in player_statuses:
            response += "<b>{}</b>: {}üîò\n/buy_status_{}\n\n".format(name, price, status_id)
    response += "\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å (10000 üîò): /set_own_status {–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å}\n" \
                "<em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç –≤–Ω–æ–≤—å —Å—Ç–æ–∏—Ç—å –∂–µ—Ç–æ–Ω—ã.</em>"
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def request_set_own_status(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    try:
        new_status = mes.text.split()[1]
    except IndexError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    if player.reputation < OWN_STATUS_PRICE:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò –∂–µ—Ç–æ–Ω–æ–≤")
        return
    player.tea_party_info.update({"requested_own_status": new_status})
    player.update()
    bot.send_message(chat_id=mes.chat_id, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ {}? ({} üîò)".format(new_status,
                                                                                                    OWN_STATUS_PRICE),
                     reply_markup=InlineKeyboardMarkup([
                         InlineKeyboardButton(text="‚úÖ–î–∞", callback_data="p_own_status yes"),
                         InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data="p_own_status no")]))


def set_own_status(bot, update):
    mes = update.callback_query.message
    player = Player.get_player(update.callback_query.from_user.id)
    if player is None:
        return
    yes = 'yes' in update.callback_query.data
    if yes:
        if player.reputation < OWN_STATUS_PRICE:
            bot.answer_callback_query(callback_query_id=update.callback_query.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò –∂–µ—Ç–æ–Ω–æ–≤",
                                      show_alert=True)
            return
        new_status = player.tea_party_info.get("requested_own_status")
        if new_status is None:
            bot.answer_callback_query(callback_query_id=update.callback_query.id,
                                      text="–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≥–æ (/set_own_status {status})",
                                      show_alert=True)
            return
        player.reputation -= OWN_STATUS_PRICE
        player.tea_party_info.update({"own_status": new_status})
        player.update()
        text = "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω."

    else:
        text = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    player.tea_party_info.pop("requested_own_status")
    try:
        bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=text)
    except BadRequest:
        bot.send_message(chat_id=mes.chat_id, text=text)



def buy_status(bot, update):
    mes = update.message
    status_id = re.search("_(\\d+)", mes.text)
    if status_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    status_id = int(status_id.group(1))
    player = Player.get_player(mes.from_user.id)
    player_statuses = player.tea_party_info.get("statuses")
    if player_statuses is None:
        player_statuses = []
        player.tea_party_info.update({"statuses": player_statuses})
    if status_id in player_statuses:
        bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å —É–∂–µ –∫—É–ø–ª–µ–Ω")
        return
    status = statuses_const.get(status_id)
    price, name = status.get("price"), status.get("name")
    if player.reputation < price:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò")
        return
    player.reputation -= price
    player_statuses.append(status_id)
    player.update()
    bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å <b>{}</b> —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!".format(name), parse_mode='HTML')


def statuses(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    player_statuses = player.tea_party_info.get("statuses")
    if player_statuses is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤. –°—Ç–∞—Ç—É—Å—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ (–ß–∞–π–Ω–∞—è –ª–∏–≥–∞)")
        return
    response = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{}</b>\n\n".format(get_status_text_by_id(player.status)) if \
        player.status is not None else ""
    response += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n"
    for status_id in player_statuses:
        status = statuses_const.get(status_id)
        name = status.get("name")
        response += "<b>{}</b>\n/status_on_{}\n\n".format(name, status_id)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def status_on(bot, update):
    mes = update.message
    status_id = re.search("_(\\d+)", mes.text)
    if status_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    status_id = int(status_id.group(1))
    player = Player.get_player(mes.from_user.id)
    player_statuses = player.tea_party_info.get("statuses")
    if player_statuses is None or status_id not in player_statuses:
        bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –∫—É–ø–ª–µ–Ω?")
        return
    if player.status is not None:
        if player.status not in player_statuses:
            player_statuses.append(player.status)
    player.status = status_id
    player.update()
    bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")


def get_status_text_by_id(status_id: int, player_id=None) -> str:
    status = statuses_const.get(status_id)
    if status is not None:
        return status["name"]
    return None
