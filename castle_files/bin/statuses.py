"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
"""

from castle_files.work_materials.statuses_const import statuses as statuses_const, statuses_to_messages, \
    default_status_messages
from castle_files.work_materials.globals import STATUSES_MODERATION_CHAT_ID, moscow_tz

from castle_files.libs.player import Player

from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import BadRequest

import re
import datetime
import random

OWN_STATUS_PRICE = 5000
# PLAYER_STATUS_PRICE = 10000
OWN_STATUS_ID = 0


def status_shop(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    response = "–°—Ç–∞—Ç—É—Å—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n"
    player_statuses = player.tea_party_info.get("statuses") or []
    for status_id, status in list(statuses_const.items()):
        name, price = status.get("name"), status.get("price")
        if status not in player_statuses and not status.get("unique"):
            response += "<b>{}</b>: {}üîò\n/buy_status_{}\n\n".format(name, price, status_id)
    response += "\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({} üîò): /set_own_status [–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å]\n" \
                "<em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–µ—Ç –≤–Ω–æ–≤—å —Å—Ç–æ–∏—Ç—å –∂–µ—Ç–æ–Ω—ã.</em>\n" \
                "".format(OWN_STATUS_PRICE)
                # "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–º—É ({} üîò): /set_player_status {} {}".format(
                # OWN_STATUS_PRICE, "{–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å}", PLAYER_STATUS_PRICE, "id –∏–≥—Ä–æ–∫–∞", "{–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å}")
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def request_set_own_status(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    try:
        new_status = mes.text.split()[1]
    except IndexError:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    if player.reputation < OWN_STATUS_PRICE:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò –∂–µ—Ç–æ–Ω–æ–≤")
        return
    if player.tea_party_info.get("own_status_awaiting_moderation") is not None:
        bot.send_message(chat_id=mes.chat_id, text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ—Ö–æ–¥—è—â–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏—é. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return
    for status_id, status in list(statuses_const.items()):
        if new_status == status["name"]:
            bot.send_message(chat_id=mes.chat_id,
                             text="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return
    if 'üéó' in new_status:
        bot.send_message(chat_id=mes.chat_id, text="üéó –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ.")
        return
    player.tea_party_info.update({"requested_own_status": new_status})
    player.update()
    bot.send_message(chat_id=mes.chat_id, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ {}? ({} üîò)\n\n"
                                               "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é."
                                               "".format(new_status, OWN_STATUS_PRICE),
                     reply_markup=InlineKeyboardMarkup([[
                         InlineKeyboardButton(text="‚úÖ–î–∞", callback_data="p_own_status yes"),
                         InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data="p_own_status no")]]))


def set_own_status(bot, update):
    mes = update.callback_query.message
    player = Player.get_player(update.callback_query.from_user.id)
    if player is None:
        return
    yes = 'yes' in update.callback_query.data
    if yes:
        if player.reputation < OWN_STATUS_PRICE:
            bot.answer_callback_query(callback_query_id=update.callback_query.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò –∂–µ—Ç–æ–Ω–æ–≤",
                                      show_alert=True)
            return
        new_status = player.tea_party_info.get("requested_own_status")
        if new_status is None:
            bot.answer_callback_query(callback_query_id=update.callback_query.id,
                                      text="–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≥–æ (/set_own_status {status})",
                                      show_alert=True)
            return
        player.reputation -= OWN_STATUS_PRICE
        player.tea_party_info.update({"own_status_awaiting_moderation": new_status})
        bot.send_message(chat_id=STATUSES_MODERATION_CHAT_ID, parse_mode='HTML',
                         text="<b>{}</b>(@{}) –•–æ—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ <b>{}</b>.\n"
                              "–†–∞–∑—Ä–µ—à–∏—Ç—å?".format(player.nickname, player.username, new_status),
                         reply_markup=InlineKeyboardMarkup([[
                             InlineKeyboardButton(text="‚úÖ–î–∞",
                                                  callback_data="p_moderate_status_{} yes".format(player.id)),
                             InlineKeyboardButton(text="‚ùå–ù–µ—Ç",
                                                  callback_data="p_moderate_status_{} no".format(player.id))]]))
        player.update()
        text = "–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."

    else:
        text = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    player.tea_party_info.pop("requested_own_status")
    try:
        bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=text)
    except BadRequest:
        bot.send_message(chat_id=mes.chat_id, text=text)


def moderate_status(bot, update):
    mes = update.callback_query.message
    player_id = re.search("_(\\d+)", update.callback_query.data)
    if player_id is None:
        bot.answer_callback_query(callback_query_id=update.callback_query.id,
                                  text="–û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ",
                                  show_alert=True)
        return
    player_id = int(player_id.group(1))
    player = Player.get_player(player_id)
    if player is None:
        return
    yes = 'yes' in update.callback_query.data
    new_status = player.tea_party_info.get("own_status_awaiting_moderation")
    if new_status is None:
        bot.answer_callback_query(callback_query_id=update.callback_query.id,
                                  text="–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞ –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏",
                                  show_alert=True)
        return
    answer_text = "{} @<b>{}</b> –≤ <code>{}</code>" \
                  "".format("–û–¥–æ–±—Ä–µ–Ω–æ" if yes else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", update.callback_query.from_user.username,
                            datetime.datetime.now(tz=moscow_tz).strftime("%d/%m/%y %H:%M:%S"))
    if yes:
        player.tea_party_info.update({"own_status": new_status})
        text = "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (<b>{}</b>) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é.".format(new_status)
        # –ó–∞–ø–∏—Å—ã–≤–∞—é –≤ —Å—Ç–∞—Ç—É—Å—ã –Ω–æ–≤—ã–π
        pl_statuses = player.tea_party_info.get("statuses")
        if pl_statuses is None:
            pl_statuses = []
            player.tea_party_info.update({"statuses": pl_statuses})
        if OWN_STATUS_ID not in pl_statuses:
            pl_statuses.append(OWN_STATUS_ID)
    else:
        text = "–°—Ç–∞—Ç—É—Å (<b>{}</b>) –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {} üîò –∂–µ—Ç–æ–Ω–æ–≤".format(new_status, OWN_STATUS_PRICE)
        player.reputation += OWN_STATUS_PRICE
    player.tea_party_info.pop("own_status_awaiting_moderation")
    player.update()
    bot.send_message(chat_id=player.id, text=text, parse_mode='HTML')
    bot.edit_message_text(chat_id=mes.chat_id, message_id=mes.message_id, text=mes.text + "\n" + answer_text,
                          parse_mode='HTML')


def buy_status(bot, update):
    mes = update.message
    status_id = re.search("_(\\d+)", mes.text)
    if status_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    status_id = int(status_id.group(1))
    player = Player.get_player(mes.from_user.id)
    player_statuses = player.tea_party_info.get("statuses")
    if player_statuses is None:
        player_statuses = []
        player.tea_party_info.update({"statuses": player_statuses})
    if status_id in player_statuses:
        bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å —É–∂–µ –∫—É–ø–ª–µ–Ω")
        return
    status = statuses_const.get(status_id)
    price, name = status.get("price"), status.get("name")
    if price is None:
        bot.send_message(chat_id=mes.chat_id, text="–≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å.")
        return
    if player.reputation < price:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò")
        return
    player.reputation -= price
    player_statuses.append(status_id)
    player.update()
    bot.send_message(chat_id=mes.chat_id,
                     text="–°—Ç–∞—Ç—É—Å <b>{}</b> —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ! "
                          "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: /statuses".format(name), parse_mode='HTML')


def statuses(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    player_statuses = player.tea_party_info.get("statuses")
    if player_statuses is None:
        bot.send_message(chat_id=mes.chat_id,
                         text="–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤. –°—Ç–∞—Ç—É—Å—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ (–ß–∞–π–Ω–∞—è –ª–∏–≥–∞)")
        return
    response = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{}</b>\n\n".format(get_status_text_by_id(player.status, player.id)) if \
        player.status is not None else ""
    response += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n"
    for status_id in player_statuses:
        if status_id == OWN_STATUS_ID:
            name = player.tea_party_info.get("own_status")
        else:
            status = statuses_const.get(status_id)
            name = status.get("name")
        response += "<b>{}</b>\n/status_on_{}\n\n".format(name, status_id)
    bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML')


def status_on(bot, update):
    mes = update.message
    status_id = re.search("_(\\d+)", mes.text)
    if status_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    status_id = int(status_id.group(1))
    player = Player.get_player(mes.from_user.id)
    player_statuses = player.tea_party_info.get("statuses")
    if player_statuses is None or status_id not in player_statuses:
        bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –∫—É–ø–ª–µ–Ω?")
        return
    if player.status is not None:
        if player.status not in player_statuses:
            player_statuses.append(player.status)
    player.status = status_id
    player.update()
    bot.send_message(chat_id=mes.chat_id, text="–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")


def get_status_text_by_id(status_id: int, player_id=None) -> str:
    if status_id == OWN_STATUS_ID:
        player = Player.get_player(player_id, notify_on_error=False)
        if player is None:
            raise RuntimeError
        return player.tea_party_info.get("own_status")
    status = statuses_const.get(status_id)
    if status is not None:
        name = status["name"]
        if status.get("unique"):
            name += " üéó"
        return name
    return None


def get_status_message_by_text(text: str) -> str:
    s = statuses_to_messages.get(text)
    return s if s is not None else random.choice(default_status_messages).format(text)
