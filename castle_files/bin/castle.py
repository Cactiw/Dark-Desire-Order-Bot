"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å "–∏–≥—Ä–æ–≤—ã–º" –∑–∞–º–∫–æ–º - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–º–∫–æ–º –°–∫–∞–ª—ã –≤ –±–æ—Ç–µ
"""
from castle_files.bin.buttons import send_general_buttons, get_general_buttons, get_tops_buttons
from castle_files.bin.service_functions import dict_invert
from castle_files.bin.common_functions import unknown_input
from castle_files.libs.castle.location import Location
from castle_files.libs.player import Player
from castle_files.libs.guild import Guild

from castle_files.work_materials.globals import high_access_list, DEFAULT_CASTLE_STATUS, cursor, conn, SUPER_ADMIN_ID, \
    classes_to_emoji
from globals import update_request_queue

from telegram import ReplyKeyboardMarkup
from telegram.error import BadRequest, TelegramError

import re
import logging
import traceback

TOP_NUM_PLAYERS = 20

emoji_to_class = dict_invert(classes_to_emoji)


def change_rp(bot, update, user_data):
    if update.message.from_user.id != update.message.chat_id:
        return
    user_data.update({"status": DEFAULT_CASTLE_STATUS})
    rp_off = user_data.get("rp_off")
    if rp_off:
        user_data.pop("rp_off")
        send_general_buttons(update.message.from_user.id, user_data, bot=bot)
        return
    user_data.update({"status": "rp_off", "rp_off": True})
    bot.send_message(chat_id=update.message.chat_id, text="–†–µ–∂–∏–º –†–ü –æ—Ç–∫–ª—é—á—ë–Ω. –ï—Å–ª–∏ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                                                          "–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ /change_rp –µ—â—ë —Ä–∞–∑.")
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def back(bot, update, user_data):
    statuses_back = {
        "barracks": "central_square",
        "central_square": "central_square",
        "castle_gates": "central_square",
        "throne_room": "central_square",

        "mid_feedback": "throne_room",
        "duty_feedback": "castle_gates",

        "king_cabinet": "throne_room",
        "headquarters": "throne_room",
        "changing_castle_message": "king_cabinet",
        "sending_guild_message": "headquarters",
        "editing_debrief": "headquarters",

        "technical_tower": "central_square",
        "my_cabinet": "technical_tower",
        "sending_bot_guild_message": "technical_tower",
        "editing_update_message": "technical_tower",

        "sawmill": "castle_gates",
        "quarry": "castle_gates",
        "construction": "construction_plate",
        "construction_plate": "central_square",

        "treasury": "throne_room",

        "hall_of_fame": "central_square",
        # "tops": "hall_of_fame",

        "tops": "central_square",

        "manuscript": "technical_tower",

    }

    statuses_rp_off = {
        "tops": DEFAULT_CASTLE_STATUS,
        "mid_feedback": DEFAULT_CASTLE_STATUS,


        "manuscript": DEFAULT_CASTLE_STATUS,
    }

    status = user_data.get("status")
    if status is None:
        send_general_buttons(update.message.from_user.id, user_data, bot=bot)
        return
    if status in ["sawmill", "quarry", "construction"]:
        bot.send_message(chat_id=update.message.from_user.id, text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    rp_off = user_data.get("rp_off") or False
    new_status = None
    if rp_off:
        new_status = statuses_rp_off.get(status)
    if new_status is None:
        new_status = statuses_back.get(status)
    new_location = Location.get_id_by_status(new_status)
    user_data.update({"status": new_status, "location_id": new_location})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def guide_signs(bot, update):  # TODO: —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    bot.send_message(chat_id=update.message.from_user.id,
                     text="üó∫–£–∫–∞–∑–∞—Ç–µ–ª–∏ –≥–ª–∞—Å—è—Ç:\n"
                          "üé™<b>–ö–∞–∑–∞—Ä–º–∞</b>- —à—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä–∞ —Ç–≤–æ–µ–π –≥–∏–ª—å–¥–∏–∏. "
                          "–ó–¥–µ—Å—å —Ç—ã –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å —Å–≤–æ–∏—Ö —Å–æ–≥–∏–ª—å–¥–µ–π—Ü–µ–≤, —É–∑–Ω–∞–µ—à—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "
                          "—Å–≤–æ–∏—Ö —Å–æ—Ä–∞—Ç–Ω–∏–∫–æ–≤, —É–∑–Ω–∞–µ—à—å –æ —Ä–∞—Ç–Ω—ã—Ö –ø–æ–¥–≤–∏–≥–∞—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n\n"
                          "‚õ©<b>–ì–æ—Ä–æ–¥—Å–∫–∏–µ –í—Ä–∞—Ç–∞</b> - —Ç—É—Ç –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–∏–Ω—É—Ç—å—Å—è –ø–∞—Ä–æ—á–∫–æ–π —Å–ª–æ–≤ —Å –º–µ—Å—Ç–Ω—ã–º–∏ —Å—Ç—Ä–∞–∂–∞–º–∏, "
                          "–∏–º –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–∫—É—á–Ω–æ –Ω–∞ –ø–æ—Å—Ç—É.\n\n"
                          "üèõ<b>–¢—Ä–æ–Ω–Ω—ã–π –ó–∞–ª</b> - –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª–∫–æ–≤–æ–¥—Ü–∞–º –∏ –¥–∞–∂–µ "
                          "–ø–æ–ø—Ä–æ—Å–∏—Ç—å –∞—É–¥–∏–µ–Ω—Ü–∏—é –ö–æ—Ä–æ–ª—è.\n\n"
                          "üî≠<b>–ë–∞—à–Ω—è –¢–µ—Ö–Ω–æ-–ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫</b> - –æ—Å–Ω–æ–≤–∞ –æ—Ä–¥–µ–Ω–∞ –¢–µ–º–Ω–æ–≥–æ –ñ–µ–ª–∞–Ω–∏—è. –ó–¥–µ—Å—å –ø–æ –∫—Ä—É–ø–∏—Ü–∞–º "
                          "—Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤–µ—Å—Ç–∏ –∏ –æ—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—Ç–µ —Ç–µ—Ö–Ω–æ-–º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, "
                          "–ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–±–æ—Ç–µ –æ—Ä–¥–µ–Ω–∞ –Ω–∞–¥ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Ö–Ω–æ-–º–∞–≥–∏—á–µ—Å–∫–∏—Ö "
                          "–ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∏–π –°–∫–∞–ª—ã."
                          "\n\nüè§<b>–ú–∞–Ω–¥–∞–ø–∞ –°–ª–∞–≤—ã</b> -  –ø–æ—á–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —É–≤–µ–∫–æ–≤–µ—á–µ–Ω—ã –≥–µ—Ä–æ–∏ –°–∫–∞–ª—ã, –∏—Ö –ø–æ–¥–≤–∏–≥–∏ –∏ "
                          "–∑–∞—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–º–∫–æ–º. –í–µ—á–Ω–∞—è —Å–ª–∞–≤–∞ –∏ –ø–æ—á–µ—Ç!\n\n‚ùì\n\n‚ùì\n\n‚ùì\n\n‚ùì\n\n‚ùì\n\n"
                          "<em>–ù–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è—Ö –µ—â—ë –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤ –±—É–¥—É—â–µ–º, "
                          "—Ç–∞–º –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏</em>", parse_mode='HTML')


def not_constructed(bot, update):
    bot.send_message(chat_id=update.message.chat_id,
                     text="–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.\n"
                          "–°–µ–π—á–∞—Å –≤ –∑–∞–º–∫–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.")


def welcome(bot, update, user_data):
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def central_square(bot, update, user_data):
    user_data.update({"status": "central_square", "location_id": 0})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def barracks(bot, update, user_data):
    user_data.update({"status": "barracks", "location_id": 1})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def throne_room(bot, update, user_data):
    user_data.update({"status": "throne_room", "location_id": 2})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def castle_gates(bot, update, user_data):
    location_id = 3
    user_data.update({"status": "castle_gates", "location_id": 3})
    response = Location.get_location_enter_text_by_id(location_id)
    player = Player.get_player(update.message.from_user.id)
    buttons = get_general_buttons(user_data, only_buttons=True, player=player)
    if player is not None and player.game_class == "Sentinel":  # –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–∂–µ–π, –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
        response += "\n–ö–∞–∫ —Å—Ç—Ä–∞–∂, —Ç—ã –∏–º–µ–µ—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—Ö—Ç—É\n"
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML', reply_markup=reply_markup)


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∏–¥–∞, –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞
def fill_mid_players(other_process=False):
    high_access_list.clear()
    throne = Location.get_location(2)
    if other_process:
        throne.load_location(other_process=True)
    mid_players = throne.special_info.get("mid_players")
    for player_id in mid_players:
        high_access_list.append(player_id)


# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –º–∏–¥–∞
def watch_portraits(bot, update):
    response = "–°—Ç–µ–Ω—ã –∑–∞–º–∫–∞ —É–≤–µ—à–∞–Ω—ã –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º–∏ —Ç–µ–∫—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞–ª–æ–≤ –°–∫–∞–ª—ã:\n"
    for user_id in high_access_list:
        player = Player.get_player(user_id, notify_on_error=False)
        if player is None:
            continue
        response += "@{} - <b>{}</b>\n".format(player.username, player.nickname)
    bot.send_message(chat_id=update.message.from_user.id, text=response, parse_mode='HTML')


def headquarters(bot, update, user_data):
    user_data.update({"status": "headquarters", "location_id": 4})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def request_change_debrief(bot, update, user_data):
    user_data.update({"status": "editing_debrief"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.from_user.id,
                     text="–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–æ–≤—ã–º –¥–µ–±—Ä–∏—Ñ–æ–º. –û–Ω –¥–æ–ª–∂–µ–Ω –≤–ª–µ–∑—Ç—å –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                          "{}".format(Location.get_location_enter_text_by_id(2, without_format=True).format(
                                "DjedyBreaM", "")), reply_markup=buttons)


def change_debrief(bot, update, user_data):
    user_data.update({"status": "throne_room", "location_id": 2})
    throne = Location.get_location(2)
    format_values = throne.special_info.get("enter_text_format_values")
    format_values[1] = update.message.text
    throne.special_info.update({"enter_text_format_values": format_values})
    throne.update_location_to_database()
    bot.send_message(chat_id=update.message.from_user.id,
                     text="–î–µ–±—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω. –í—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å—ë –≤—ã–≥–ª—è–¥–∏—Ç "
                          "—Ö–æ—Ä–æ—à–æ.\n\n<em>–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–±—Ä–∏—Ñ–æ–º, "
                          "–∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ</em>", parse_mode='HTML')
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def request_guild_message_notify(bot, update, user_data):
    user_data.update({"status": "sending_guild_message"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.from_user.id, text="–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤–æ –≤—Å–µ –≥–∏–ª—å–¥–∏–∏",
                     reply_markup=buttons)


def send_guild_message_notify(bot, update, user_data):
    user_data.update({"status": "headquarters"})
    for guild_id in Guild.guild_ids:
        guild = Guild.get_guild(guild_id=guild_id)
        if guild.division != "–õ—É–∫–∏":
            bot.send_message(chat_id=guild.chat_id, text=update.message.text, parse_mode='HTML')
    bot.send_message(update.message.from_user.id, text="–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


def king_cabinet(bot, update, user_data):
    response = "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç. –ü–∞–º—è—Ç—å —É—Å–ª—É–∂–ª–∏–≤–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–µ–Ω–µ—Ä–∞–ª–æ–≤:\n"
    for user_id in high_access_list:
        player = Player.get_player(user_id, notify_on_error=False)
        if player is None:
            continue
        response += "@{} - <b>{}</b>\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å—Å—ã–ª–∫—É: /remove_general_{}\n" \
                    "\n".format(player.username, player.nickname, player.id)
    user_data.update({"status": "king_cabinet"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.from_user.id, text=response, reply_markup=buttons, parse_mode='HTML')


def request_change_castle_message(bot, update, user_data):
    central = Location.get_location(0)
    current_message = central.special_info.get("enter_text_format_values")
    user_data.update({"status": "changing_castle_message"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.from_user.id,
                     text="–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<em>{}</em>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ –¥–µ–ª–∞–π—Ç–µ –µ–≥–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º."
                          "".format(current_message), parse_mode='HTML', reply_markup=buttons)


def change_castle_message(bot, update, user_data):
    central = Location.get_location(0)
    old_format = central.special_info.get("enter_text_format_values")
    old_format[0] = update.message.text
    central.update_location_to_database()
    user_data.update({"status": "king_cabinet"})
    bot.send_message(chat_id=update.message.from_user.id,
                     text="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<em>{}</em>".format(update.message.text), parse_mode='HTML')


def add_general(bot, update, user_data):
    user_data.update({"status": "adding_general"})
    bot.send_message(chat_id=update.message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ id –Ω–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞–ª–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞–∑–∞–¥\"")


def adding_general(bot, update, user_data):
    mes = update.message
    try:
        player_id = int(mes.text)
    except ValueError:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    if player_id in high_access_list:
        bot.send_message(chat_id=update.message.from_user.id, text="–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è—Å –≥–µ–Ω–µ—Ä–∞–ª–æ–º.")
        return
    player = Player.get_player(player_id, notify_on_error=False)
    if player is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ —Ö–æ–ª–æ–ø–∞. "
                                                                   "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ")
        return
    throne = Location.get_location(2)
    mid_players = throne.special_info.get("mid_players")
    mid_players.append(player_id)
    throne.update_location_to_database()
    fill_mid_players()
    bot.send_message(chat_id=update.message.from_user.id, text="@{} —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∞–ª!".format(player.username))
    user_data.update({"status": "king_cabinet"})
    update_request_queue.put(["update_mid"])


def remove_general(bot, update):
    mes = update.message
    player_id = re.search("_(\\d+)", mes.text)
    if player_id is None:
        bot.send_message(chat_id=update.message.from_user.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    player_id = int(player_id.group(1))
    if player_id not in high_access_list:
        bot.send_message(chat_id=update.message.from_user.id, text="–¢–∞–∫ –æ–Ω, —ç—Ç–æ, –≤—Ä–æ–¥–µ –∏ –Ω–µ –≥–µ–Ω–µ—Ä–∞–ª –≤–æ–≤—Å–µ. "
                                                                   "–ú–æ–∂–µ—Ç, –ø–æ–º–∏–ª—É–µ–º?")
        return
    player = Player.get_player(player_id, notify_on_error=False)
    throne = Location.get_location(2)
    mid_players = throne.special_info.get("mid_players")
    mid_players.remove(player_id)
    throne.update_location_to_database()
    fill_mid_players()
    bot.send_message(chat_id=update.message.from_user.id,
                     text="@{} —Å–æ—Å–ª–∞–Ω –≤ —Ç–æ—Ä—Ç—É–≥—É –∏ –±–æ–ª—å—à–µ –Ω–µ –≥–µ–Ω–µ—Ä–∞–ª".format(player.username))
    update_request_queue.put(["update_mid"])


def hall_of_fame(bot, update, user_data):
    hall = Location.get_location(8)
    if not hall.is_constructed() and update.message.from_user.id != SUPER_ADMIN_ID:
        unknown_input(bot, update, user_data)
        return
    user_data.update({"status": "hall_of_fame", "location_id": 8})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def tops(bot, update, user_data):
    user_data.update({"status": "tops"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=buttons)


def get_tops_text(player, stat, stat_text, game_class=None):
    response = "–¢–æ–ø {} –ø–æ –∑–∞–º–∫—É:\n".format(stat_text)
    found = False
    if player is None:
        found = True
    if stat in ["wood", "stone", "construction"]:
        if stat == "construction":
            request = "select nickname, count(1) as construction_count, game_class, lvl, player_id from castle_logs " \
                      "left join players on castle_logs.player_id = players.id where action = 'construction' {}" \
                      "group by nickname, game_class, lvl, player_id order by construction_count desc;" \
                      "".format("and game_class = '{}' ".format(game_class) if game_class is not None else "")
        else:
            request = "select nickname, count(1) as res_count, game_class, lvl, player_id from castle_logs " \
                      "left join players on castle_logs.player_id = players.id where action = 'collect_resources' and "\
                      "additional_info ->> 'resource' = '{}' {}group by nickname, game_class, lvl, player_id order by "\
                      "res_count desc;".format(stat, "and game_class = '{}'"
                                                     "".format(game_class) if game_class is not None else "")
    else:
        request = "select nickname, {}, game_class, lvl, id from players where castle = 'üñ§' and {} is not null {}" \
                  "order by {} desc".format(stat, stat, "and game_class = '{}' ".format(game_class) if
                                            game_class is not None else "", stat)
    cursor.execute(request)
    row = cursor.fetchone()
    num = 0
    response_old = ""
    while row is not None:
        num += 1
        class_icon = classes_to_emoji.get(row[2]) or '‚ùî'
        if row[4] == player.id:
            response_new = "<b>{}) {}</b><code>{:<3}</code><b> üèÖ: {} {}{}</b> üîª" \
                           "\n".format(num, stat_text, row[1] or "???", row[3], class_icon, row[0])
            found = True
            if num <= TOP_NUM_PLAYERS:
                response += response_new
                row = cursor.fetchone()
                continue
            response += "\n...\n" + response_old + response_new
        else:
            response_old = "<code>{}</code>) {}<code>{:<3}</code> üèÖ: <code>{}</code> {}{}" \
                           "\n".format(num, stat_text, row[1] or "???", row[3], class_icon, row[0])
            if num <= TOP_NUM_PLAYERS:
                response += response_old
            else:
                if found:
                    if num == TOP_NUM_PLAYERS + 1:
                        break
                    response += response_old
                    break
        row = cursor.fetchone()
    return response


def top_stat(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    text_to_stats = {"‚öîÔ∏è–ê—Ç–∞–∫–∞": "attack", "üõ°–ó–∞—â–∏—Ç–∞": "defense", "üî•–û–ø—ã—Ç": "exp", "üå≤–î–µ—Ä–µ–≤–æ": "wood", "‚õ∞–ö–∞–º–µ–Ω—å": "stone",
                     "üèö–°—Ç—Ä–æ–π–∫–∞": "construction"}
    stat = text_to_stats.get(mes.text)
    response = get_tops_text(player, stat, mes.text[0])
    buttons = get_tops_buttons(stat)
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML', reply_markup=buttons)


def send_new_top(bot, update):
    stat_to_text = {"attack": "‚öîÔ∏è", "defense": "üõ°", "exp": "üî•", "wood": "üå≤", "stone": "‚õ∞", "construction": "üèö"}
    mes = update.callback_query.message
    data = update.callback_query.data
    parse = re.search("top_([^_]+)_(.*)", data)
    if parse is None:
        bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ø—ã –∑–∞–Ω–æ–≥–æ.")
        return
    stat = parse.group(1)
    class_emoji = parse.group(2)
    game_class = emoji_to_class.get(class_emoji)
    player = Player.get_player(update.callback_query.from_user.id)
    if player is None:
        return
    response = get_tops_text(player, stat, stat_to_text.get(stat), game_class=game_class)
    buttons = get_tops_buttons(stat, curr=class_emoji)
    """bot.send_message(chat_id=update.callback_query.message.chat_id, text=response, parse_mode='HTML',
                     reply_markup=buttons)"""
    try:
        bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=response,
                            reply_markup=buttons, parse_mode='HTML')
    # except Exception:
        # logging.error(traceback.format_exc())
    except BadRequest:
        pass
    except TelegramError:
        pass
    bot.answerCallbackQuery(callback_query_id=update.callback_query.id)


def count_reputation_sum(bot, update):
    request = "select action, player_id from castle_logs"
    cursor.execute(request)
    rep = {}
    action_to_rep = {"collect_resources": 3, "construction": 5}
    row = cursor.fetchone()
    while row is not None:
        action, player_id = row
        cur_rep = rep.get(player_id) or 0
        cur_rep += action_to_rep.get(action)
        rep.update({player_id: cur_rep})
        row = cursor.fetchone()
    lst = list(rep.items())
    lst.sort(key=lambda x: Player.get_player(x[0]).reputation - x[1], reverse=True)
    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–µ—Ç–æ–Ω–∞–º:\n"
    for obj in lst:
        id, reputation = obj
        player = Player.get_player(id)
        new_response = "<code>{:<20}</code> üîò: <code>{:4<}</code>, –≤—Å–µ–≥–æ üîò: <code>{:<4}</code>, <code>{}</code>\n" \
                       "".format(player.username, reputation, player.reputation, player.reputation - reputation)
        if len(response + new_response) > 4000:
            bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')
            response = ""
        response += new_response
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')


