"""
–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—Ö —Å –º–æ–±–∞–º–∏
"""

from castle_files.work_materials.globals import MOB_CHAT_ID
from castle_files.work_materials.filters.general_filters import filter_is_pm

import re

from telegram import InlineKeyboardButton, InlineKeyboardMarkup


def mob(bot, update):
    mes = update.message
    link = re.search("/fight_(.*)$", mes.text)
    if link is None:
        bot.send_message(chat_id=mes.chat_id, text="–û—à–∏–±–∫–∞.")
        return
    link = link.group(1)
    response = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–±—ã:\n"
    for string in mes.text.splitlines():
        parse = re.search("(.+) lvl\\.(\\d+)", string)
        if parse is not None:
            name = parse.group(1)
            lvl = int(parse.group(2))
            response += "<b>{}</b> üèÖ: <code>{}</code>\n".format(name, lvl)
    buttons = InlineKeyboardMarkup([[InlineKeyboardButton(text="‚öîÔ∏è–í –±–æ–π!",
                                                          url=u"https://t.me/share/url?url=/fight_{}".format(link))]])
    if filter_is_pm(mes):
        bot.send_message(chat_id=MOB_CHAT_ID, text=response, parse_mode='HTML', reply_markup=buttons)
    else:
        bot.send_message(chat_id=mes.chat_id, text=response, parse_mode='HTML', reply_markup=buttons)
    return
