"""
–ó–¥–µ—Å—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–æ–π–∫–æ–π, –≤ —Ç–æ–º —á–∏—Å–ª–µ –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, —É—á—ë—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–π–∫–∏, –æ–Ω–∞ –≤–µ–¥—å
–Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –∫–∞–∫-—Ç–æ –µ—â—ë –±—É–¥–µ—Ç –Ω–∞–±–∏—Ä–∞—Ç—å—Å—è), –∏ —Å–∞–º–∞ —Å—Ç—Ä–æ–π–∫–∞.
"""
from castle_files.bin.buttons import get_general_buttons, send_general_buttons
from castle_files.bin.stock import get_item_code_by_name, get_item_name_by_code
from castle_files.bin.service_functions import get_message_forward_time, plan_work
from castle_files.bin.quest_triggers import on_add_cw_quest, on_resource_return, on_won_arena
from castle_files.bin.service_functions import check_access

from castle_files.libs.player import Player
from castle_files.libs.castle.location import Location, locations
from castle_files.libs.quest import Quest, CollectResourceQuest, quests, GuildQuest
from castle_files.libs.my_job import MyJob

from castle_files.work_materials.globals import job, dispatcher, cursor, moscow_tz, construction_jobs, conn, \
    local_tz, utc, MID_CHAT_ID
from castle_files.work_materials.quest_texts import quest_texts

import time
import pickle
import logging
import traceback
import json
import datetime
import random
import re
import copy

import threading

MINING_QUEST_DURATION_SECONDS = 3 * 60
CONSTRUCTION_DURATION_SECONDS = 5 * 60

CONSTRUCTION_REPUTATION = 5


def sawmill(bot, update, user_data):
    user_data.update({"status": "sawmill"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.chat_id,
                     text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –¥–æ–±—ã–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ. –≠—Ç–æ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –º–∏–Ω—É—Ç—ã.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è "
                          "–º–≥–Ω–æ–≤–µ–Ω–Ω–æ. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—Å—è –¥–æ–±—ã—á–∞ –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω–∞.", reply_markup=buttons)
    context = [update.message.from_user.id, user_data]
    j = job.run_once(callback=resource_return, when=MINING_QUEST_DURATION_SECONDS, context=context)
    old_j = construction_jobs.get(update.message.from_user.id)
    if old_j is not None:
        old_j.job.schedule_removal()
    construction_jobs.update({update.message.from_user.id: MyJob(j, MINING_QUEST_DURATION_SECONDS)})


def quarry(bot, update, user_data):
    user_data.update({"status": "quarry"})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.chat_id,
                     text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –¥–æ–±—ã–≤–∞—Ç—å –∫–∞–º–µ–Ω—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –º–∏–Ω—É—Ç—ã", reply_markup=buttons)
    context = [update.message.from_user.id, user_data]
    j = job.run_once(callback=resource_return, when=MINING_QUEST_DURATION_SECONDS, context=context)
    old_j = construction_jobs.get(update.message.from_user.id)
    if old_j is not None:
        old_j.job.schedule_removal()
    construction_jobs.update({update.message.from_user.id: MyJob(j, MINING_QUEST_DURATION_SECONDS)})


def treasury(bot, update, user_data):
    user_data.update({"status": "treasury", "location_id": 6})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def resource_return(bot, job):
    cursor = conn.cursor()
    if job.context[1].get("status") not in ["sawmill", "quarry"]:
        logging.warning("Status not in  [\"sawmill\", \"quarry\"], status = {}".format(job.context[1].get("status")))
        return
    statuses_to_res = {"sawmill": "wood", "quarry": "stone"}
    res = statuses_to_res.get(job.context[1].get("status"))
    count = 1
    throne = Location.get_location(2)
    throne.treasury.change_resource(res, count)
    player = Player.get_player(job.context[0])
    player.reputation += 3
    player.update_to_database()
    job.context[1].update({"status": "castle_gates"})
    buttons = get_general_buttons(job.context[1], player)
    if job.context[0] in construction_jobs:
        try:
            construction_jobs.pop(job.context[0])
        except Exception:
            logging.error(traceback.format_exc())
    request = "insert into castle_logs(player_id, action, result, additional_info, date) values (%s, %s, %s, %s, %s)"
    cursor.execute(request, (player.id, "collect_resources", 1, json.dumps({"resource": res, "count": count}),
                             datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)))
    bot.send_message(chat_id=job.context[0], text="–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±—ã–ª–∏ {}. –ö–∞–∑–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–æ 3 üîò"
                                                  "".format("–¥–µ—Ä–µ–≤–æ" if res == "wood" else "–∫–∞–º–µ–Ω—å"),
                     reply_markup=buttons)
    on_resource_return(player, res)


def king_cabinet_construction(bot, update):
    request = "select location_id from locations where state is false and building_process = -1"
    cursor.execute(request)
    row = cursor.fetchone()
    response = "–ó–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç—å:\n"
    while row is not None:
        location = Location.get_location(row[0])
        if location is None:
            row = cursor.fetchone()
            continue
        response += "<b>{}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: üå≤: <code>{}</code>, ‚õ∞: <code>{}</code>\n–ù–∞—á–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: " \
                    "/begin_construction_{}\n".format(location.name, location.need_res_to_construct.get("wood") or 0,
                                                      location.need_res_to_construct.get("stone") or 0, location.id)
        row = cursor.fetchone()
    response += "\n----------------------\n–°—Ç—Ä–æ–π–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\n"
    request = "select location_id from locations where state is false and building_process >= 0"
    cursor.execute(request)
    row = cursor.fetchone()
    while row is not None:
        location = Location.get_location(row[0])
        if location is None:
            row = cursor.fetchone()
            continue
        response += "<b>{}</b>\n–ü—Ä–æ–≥—Ä–µ—Å—Å: <code>{}</code> –∏–∑ <code>{}</code>\n" \
                    "\n".format(location.name, location.building_process, location.need_clicks_to_construct)
        row = cursor.fetchone()
    treasury = Location.get_location(6)
    response += "\n----------------------\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∑–Ω—ã: üå≤–î–µ—Ä–µ–≤–æ: <b>{}</b>, " \
                "‚õ∞–ö–∞–º–µ–Ω—å: <b>{}</b>".format(treasury.wood, treasury.stone)
    bot.send_message(chat_id=update.message.chat_id, text=response, parse_mode='HTML')


def begin_construction(bot, update):
    mes = update.message
    location_id = re.search("_(\\d+)", mes.text)
    if location_id is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        return
    location_id = int(location_id.group(1))
    location = Location.get_location(location_id)
    if location is None:
        bot.send_message(chat_id=mes.chat_id, text="–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    if location.state is True or location.building_process > 0:
        bot.send_message(chat_id=mes.chat_id, text="–õ–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–æ–π–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        return
    treasury = Location.get_location(6)
    need_wood = location.need_res_to_construct.get("wood") or 0
    need_stone = location.need_res_to_construct.get("stone") or 0
    if treasury.wood < need_wood or treasury.stone < need_stone:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. "
                                                   "–í–∞–º —Å–ª–µ–¥—É–µ—Ç –±—ã—Ç—å –∂–µ—Å—Ç—á–µ —Å –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–º–∏!")
        return
    treasury.wood -= need_wood
    treasury.stone -= need_stone
    treasury.update_location_to_database()
    ctrl = Location.get_location(0)
    old = ctrl.special_info.get("enter_text_format_values")
    old[1] = treasury.wood
    old[2] = treasury.stone
    location.building_process = 0
    location.update_location_to_database()
    bot.send_message(chat_id=mes.chat_id, text="–°—Ç—Ä–æ–π–∫–∞ <b>{}</b> –Ω–∞—á–∞–ª–∞—Å—å!".format(location.name), parse_mode='HTML')


def construction_plate(bot, update, user_data):
    user_data.update({"status": "construction_plate", "location_id": 7})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


def construct(bot, update, user_data):
    mes = update.message
    location_id = None
    for loc in list(locations.values()):
        if loc.name == mes.text:
            location_id = loc.id
            break
    if mes.text == '/build_teaparty':
        location_id = 9
    if location_id is None:
        send_general_buttons(mes.from_user.id, user_data=user_data, bot=bot)
        return
    location = Location.get_location(location_id)
    if location is None:
        bot.send_message(chat_id=mes.chat_id, text="–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if location.state is True or location.building_process < 0:
        bot.send_message(chat_id=mes.chat_id, text="–õ–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å.")
        return

    context = [update.message.from_user.id, user_data]
    j = job.run_once(callback=construction_return, when=CONSTRUCTION_DURATION_SECONDS, context=context)
    old_j = construction_jobs.get(update.message.from_user.id)
    if old_j is not None:
        old_j.job.schedule_removal()
    construction_jobs.update({update.message.from_user.id: MyJob(j, CONSTRUCTION_DURATION_SECONDS)})
    user_data.update({"status": "construction", "construction_id": location.id})
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=update.message.chat_id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–æ–π–∫—É. –≠—Ç–æ –∑–∞–π–º—ë—Ç 5 –º–∏–Ω—É—Ç.",
                     reply_markup=buttons)


def construction_return(bot, job):
    cursor = conn.cursor()
    player_id = job.context[0]
    user_data = job.context[1]
    if user_data.get("status") not in ["construction"]:
        return
    location_id = user_data.get("construction_id")
    if location_id is None:
        bot.send_message(chat_id=player_id, text="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–∏.")
        return
    location = Location.get_location(location_id)
    if location is None:
        bot.send_message(chat_id=player_id, text="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–∏.")
        return
    print(location.name, location.state, location.building_process)
    if location.state is True or location.building_process < 0:
        bot.send_message(chat_id=player_id, text="–õ–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ —Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–∫–∞—Ü–∏—é "
                                                 "–ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –≤ —Ç–æ –≤—Ä–µ–º—è, –ø–æ–∫–∞ –≤—ã –¥–æ–±–∏—Ä–∞–ª–∏—Å—å –¥–æ —Å—Ç—Ä–æ–π–∫–∏.")
        return
    location.building_process += 3
    player = Player.get_player(job.context[0])
    if location.building_process >= location.need_clicks_to_construct:
        location.state = True
        bot.send_message(chat_id=player_id, text="–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞! –í—ã –ø–æ–ª–æ–∂–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–º–µ–Ω—å!")
        player.reputation += 50 - CONSTRUCTION_REPUTATION
    player.reputation += CONSTRUCTION_REPUTATION
    player.update_to_database()
    location.update_location_to_database()
    user_data.update({"status": "central_square"})
    if "construction_id" in user_data:
        user_data.pop("construction_id")
    if job.context[0] in construction_jobs:
        try:
            construction_jobs.pop(job.context[0])
        except Exception:
            logging.error(traceback.format_exc())
    buttons = get_general_buttons(user_data, player)
    request = "insert into castle_logs(player_id, action, result, additional_info, date) values (%s, %s, %s, %s, %s)"
    cursor.execute(request, (player.id, "construction", 1, json.dumps({"location_id": location_id}),
                             datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)))
    bot.send_message(chat_id=job.context[0],
                     text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å–æ —Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ª—É—á–µ–Ω–æ <code>{}</code> üîò".format(CONSTRUCTION_REPUTATION),
                     reply_markup=buttons, parse_mode='HTML')


def tea_party(bot, update, user_data):
    user_data.update({"status": "tea_party", "location_id": 9})
    send_general_buttons(update.message.from_user.id, user_data, bot=bot)


# –°–æ–∑–¥–∞—ë—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ when —Å–µ–∫—É–Ω–¥ (–Ω–∞ –∑–∞–ø—É—Å–∫ callback —Ñ—É–Ω–∫—Ü–∏–∏), –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ construction_jobs –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ –∏
# –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
def safe_job_create(callback, when, player_id, context=None, cancel_old=True):
    j = job.run_once(callback=callback, when=when, context=context)
    if cancel_old:
        old_j = construction_jobs.get(player_id)
        if old_j is not None:
            old_j.job.schedule_removal()
    construction_jobs.update({player_id: MyJob(j, when)})
    return j


quest_lock = threading.Lock()
quest_players = {"exploration": [], "pit": []}


def tea_party_quest(bot, update, user_data):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    quests = {"—Ä–∞–∑–≤–µ–¥–∫–∞": "exploration",
              "–∫–æ—Ç–ª–æ–≤–∞–Ω": "pit"}
    quest = None
    for key, v in list(quests.items()):
        if key.lower() in mes.text.lower():
            quest = v
            break
    if quest is None:
        logging.error("Quest is None")
        return

    user_data.update({"status": quest, "quest_name": quest})
    with quest_lock:
        lst: [int] = quest_players.get(quest)
        # lst.append(player.id)
    buttons = get_general_buttons(user_data)
    bot.send_message(chat_id=mes.chat_id, text="–¢—ã –∫—É–¥–∞-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. /f", reply_markup=buttons)
    safe_job_create(two_go_action, 5, player.id, {"quest": quest, "player_id": player.id})
    # job.run_once(two_go_action, random.random() * 180 + 120, {"quest": quest, "player_id": player.id})


def two_go_action(bot, cur_job):
    quest, player_id = cur_job.context.get("quest"), cur_job.context.get("player_id")
    player = Player.get_player(player_id)
    user_data = dispatcher.user_data.get(player_id)

    status = user_data.get("status")
    if status != quest:
        return

    with quest_lock:
        player_list = quest_players.get(quest)
        if player_list is None:
            logging.error("No quest configured for {}".format(quest))
            return
        if not player_list:
            player_list.append(player_id)
            safe_job_create(player_awaiting_timeout, 60 * 3, player.id,
                            context={"quest": quest, "player_id": player.id})
            user_data.update({"status": "waiting_second_player_for_quest"})
            return
        else:
            pair_player_id = player_list.pop()
    pair_player = Player.get_player(pair_player_id)
    pair_user_data = dispatcher.user_data.get(pair_player_id)
    quest_id, qst = random.choice(list(quest_texts[quest]["two_players"].items()))
    user_data.update({"status": "two_quest", "pair_id": pair_player_id, "quest": quest, "quest_id": quest_id})
    pair_user_data.update({"status": "two_quest", "pair_id": player_id, "quest": quest, "quest_id": quest_id})
    first_text = qst["first_begin"]
    second_text = qst.get("second_begin") or first_text
    bot.send_message(chat_id=player_id,
                     text=first_text.format(pair_player.nickname, pair_player.username), parse_mode='HTML')
    bot.send_message(chat_id=pair_player_id,
                     text=second_text.format(player.nickname, player.username), parse_mode='HTML')
    safe_job_create(two_action_timeout, 30, player.id, {"ids": [player_id, pair_player_id]})


GO_SUCCESS_REPUTATION = 10
GO_NOT_SUCCESS_REPUTATION = 3


def return_from_quest(player_id, user_data):
    with quest_lock:
        for lst in list(quest_players.values()):
            try:
                lst.remove(player_id)
            except ValueError:
                pass
    delete_list = ["quest", "quest_pressed", "quest_id", "pair_id", "quest_name"]
    for string in delete_list:
        if string in user_data:
            user_data.pop(string)
    user_data.update({"status": "tea_party"})
    j = construction_jobs.get(player_id)
    try:
        j.job.schedule_removal()
        construction_jobs.pop(player_id)
    except Exception:
        logging.error(traceback.format_exc())
        pass


def two_quest_pressed_go(bot, update, user_data: dict):
    mes = update.message
    pair_player_id, quest = user_data.get("pair_id"), user_data.get("quest")
    pair_user_data = dispatcher.user_data.get(pair_player_id)
    if pair_user_data is None:
        logging.error("Pair user_data is None for {}".format(mes.from_user.id))
        return

    try:
        j = construction_jobs.get(mes.from_user.id)
        if j is None:
            j = construction_jobs.get(pair_player_id)
        j.job.schedule_removal()
    except Exception:
        logging.error(traceback.format_exc())

    pressed = pair_user_data.get("quest_pressed")
    if not pressed:
        # –ù–∞–∂–∞–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (–∂–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ)
        user_data.update({"quest_pressed": True})
        safe_job_create(two_action_timeout, 30, mes.from_user.id, {"ids": [mes.from_user.id, pair_player_id]})
        bot.send_message(chat_id=mes.from_user.id, text="–ü—Ä–∏–Ω—è—Ç–æ! –û–∂–∏–¥–∞–π—Ç–µ —Å–æ—Ä–∞—Ç–Ω–∏–∫–∞.")
        return
    # –ù–∞–∂–∞–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
    player, pair_player = Player.get_player(mes.from_user.id), Player.get_player(pair_player_id)

    qst = quest_texts[quest]["two_players"][user_data["quest_id"]]
    first_text = qst.get("first_success")
    second_text = qst.get("second_success") or first_text

    return_from_quest(player.id, user_data)
    return_from_quest(pair_player.id, pair_user_data)
    player.reputation += GO_NOT_SUCCESS_REPUTATION
    pair_player.reputation += GO_NOT_SUCCESS_REPUTATION
    player.update()
    pair_player.update()
    buttons = get_general_buttons(user_data, player)

    bot.send_message(chat_id=player.id, text=first_text + "\n–ü–æ–ª—É—á–µ–Ω–æ {}üîò".format(GO_SUCCESS_REPUTATION),
                     reply_markup=buttons)
    bot.send_message(chat_id=pair_player_id, text=second_text + "\n–ü–æ–ª—É—á–µ–Ω–æ {}üîò".format(GO_SUCCESS_REPUTATION),
                     reply_markup=buttons)

    now = datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)
    request = "insert into castle_logs(player_id, action, result, date, additional_info) values (%s, %s, %s, %s, %s)"
    cursor.execute(request, (player.id, quest, 1, now, json.dumps({"result": "two_players_success",
                                                                   "pair_player_id": pair_player_id})))
    cursor.execute(request, (pair_player_id, quest, 1, now, json.dumps({"result": "two_players_success",
                                                                        "pair_player_id": player.id})))


# –¢–∞–π–º–∞—É—Ç –ø–æ–¥–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def player_awaiting_timeout(bot, cur_job):
    quest, player_id = cur_job.context.get("quest"), cur_job.context.get("player_id")
    player = Player.get_player(player_id)
    user_data = dispatcher.user_data.get(player_id)

    status = user_data.get("status")
    if status != "waiting_second_player_for_quest":
        return

    return_from_quest(player_id, user_data)
    buttons = get_general_buttons(user_data, player)
    player.reputation += GO_NOT_SUCCESS_REPUTATION
    player.update()
    bot.send_message(chat_id=player_id, text=random.choice(quest_texts[quest]["one_player"]) +
                                             "\n–ü–æ–ª—É—á–µ–Ω–æ {}üîò".format(GO_NOT_SUCCESS_REPUTATION), reply_markup=buttons)

    now = datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)
    request = "insert into castle_logs(player_id, action, result, date, additional_info) values (%s, %s, %s, %s, %s)"
    cursor.execute(request, (player.id, quest, 1, now, json.dumps({"result": "one_player_success"})))


def two_action_timeout(bot, cur_job):
    player_id, pair_player_id = cur_job.context.get("ids")
    player, pair_player = Player.get_player(player_id), Player.get_player(pair_player_id)
    user_data, pair_user_data = dispatcher.user_data.get(player_id), dispatcher.user_data.get(pair_player_id)

    status, quest = user_data.get("status"), user_data.get("quest")
    if status != "two_quest":
        return

    qst = quest_texts[quest]["two_players"][user_data["quest_id"]]
    first_text = qst.get("first_fail")
    second_text = qst.get("second_fail") or first_text

    return_from_quest(player_id, user_data)
    return_from_quest(pair_player_id, pair_user_data)
    player.reputation += GO_NOT_SUCCESS_REPUTATION
    pair_player.reputation += GO_NOT_SUCCESS_REPUTATION
    player.update()
    pair_player.update()
    buttons = get_general_buttons(user_data, player)

    bot.send_message(chat_id=player_id, text=first_text + "\n–ü–æ–ª—É—á–µ–Ω–æ {}üîò".format(GO_NOT_SUCCESS_REPUTATION),
                     reply_markup=buttons)
    bot.send_message(chat_id=pair_player_id, text=second_text + "\n–ü–æ–ª—É—á–µ–Ω–æ {}üîò".format(GO_NOT_SUCCESS_REPUTATION),
                     reply_markup=buttons)

    now = datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)
    request = "insert into castle_logs(player_id, action, result, date, additional_info) values (%s, %s, %s, %s, %s)"
    cursor.execute(request, (player.id, quest, 2, now, json.dumps({"result": "two_players_fail",
                                                                   "pair_player_id": pair_player_id})))
    cursor.execute(request, (pair_player_id, quest, 2, now, json.dumps({"result": "two_players_fail",
                                                                        "pair_player_id": player.id})))


statuses_to_callbacks = {"sawmill": resource_return, "quarry": resource_return, "construction": construction_return,
                         "exploration": two_go_action, "pit": two_go_action, "two_quest": two_action_timeout,
                         "waiting_second_player_for_quest": player_awaiting_timeout}


def add_cw_quest_result(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    parse = re.findall("–ü–æ–ª—É—á–µ–Ω–æ: (.+) \\((\\d+)\\)", mes.text)
    drop = player.tea_party_info.get("cw_quests_drop")
    if drop is None:
        drop = {}
        player.tea_party_info.update({"cw_quests_drop": drop})

    forward_message_date: datetime.datetime = get_message_forward_time(mes)
    if forward_message_date.timestamp() in drop:
        bot.send_message(chat_id=mes.chat_id, text="–î–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç —É–∂–µ —É—á—Ç—ë–Ω.")
        return
    exp = re.search("–ü–æ–ª—É—á–µ–Ω–æ: (\\d+) –æ–ø—ã—Ç–∞", mes.text)
    exp = int(exp.group(1)) if exp is not None else 0
    gold = re.search("and (\\d+) –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç", mes.text)
    gold = int(gold.group(1)) if gold is not None else 0
    new_quest = {"exp": exp, "gold": gold}
    for name, count in parse:
        code = get_item_code_by_name(name)
        new_quest.update({code: int(count)})
    drop.update({forward_message_date.timestamp(): new_quest})
    player.update()
    bot.send_message(chat_id=mes.from_user.id, text="–ö–≤–µ—Å—Ç —É—á—Ç—ë–Ω.")
    on_add_cw_quest(player, new_quest, forward_message_date.timestamp())


def add_arena_result(bot, update):
    mes = update.message
    player = Player.get_player(mes.from_user.id)
    if player.nickname in mes.text and "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" in mes.text:
        res = player.tea_party_info.get("cw_arena_result")
        if res is None:
            res = {}
            player.tea_party_info.update({"cw_arena_result": res})
        date = get_message_forward_time(mes)
        if str(date.timestamp()) in res:
            return
        res.update({str(date.timestamp()): {"won": True}})
        player.update()
        on_won_arena(player, get_message_forward_time(mes))
    pass


def update_daily_quests(bot, job):
    cursor = conn.cursor()
    request = "select id from players"
    cursor.execute(request)
    row = cursor.fetchone()
    while row is not None:
        player = Player.get_player(row[0])
        if player is None:
            continue
        daily_quests: [Quest] = player.quests_info.get("daily_quests")
        if daily_quests is None:
            daily_quests = []
            player.quests_info.update({"daily_quests": daily_quests})
        else:
            daily_quests.clear()
        forbidden_list = []
        for i in range(3):
            quest = copy.deepcopy(random.choice(list(quests.values())))
            limit = 0
            while (quest.id in forbidden_list or quest.skip_selection) and limit < 5:
                quest = copy.deepcopy(random.choice(list(quests.values())))
                limit += 1
            quest.start(player)
            if quest.daily_unique:
                forbidden_list.append(quest.id)
            daily_quests.append(quest)
        player.update_to_database()
        row = cursor.fetchone()
    time.sleep(1)
    plan_update_daily_quests()


def plan_update_daily_quests():
    plan_work(update_daily_quests, 0, 0, 0)


def load_construction_jobs():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å–ª–ª–≤–∞—Ä—å quest_players
    """
    try:
        f = open('castle_files/backup/construction_jobs', 'rb')
        up = pickle.load(f)
        print(up)
        for k, v in list(up.items()):
            now = time.time()
            remaining_time = v[1] - now
            print("remaining", remaining_time)
            callback = statuses_to_callbacks.get(v[0])
            if callback is None:
                logging.error("Callback is None for status {}".format(v[0]))
                continue
            if v[2] is None or True:  # Always get user_data from dispatcher.user_data - it must be changed in callback
                context = [k, dispatcher.user_data.get(k)]
            else:
                context = v[2]
            if remaining_time < 0:
                try:
                    job.run_once(callback, 0.1, context=context)
                    print("Job started in 0.1 seconds...")
                except Exception:
                    logging.error(traceback.format_exc())
                    pass
                continue
            try:
                construction_jobs.update({k: MyJob(job.run_once(callback, remaining_time,
                                                                context=context),
                                                   remaining_time)})
                print("Job started")
            except Exception:
                logging.error(traceback.format_exc())
        f.close()
        f = open('castle_files/backup/quest_players', 'rb')
        t = pickle.load(f)
        with quest_lock:
            quest_players.clear()
            quest_players.update(t)
        f.close()
    except FileNotFoundError:
        pass
    except Exception:
        logging.error(traceback.format_exc())


def guild_quests(bot, update):
    mes = update.message
    if not check_access(mes.from_user.id):
        return
    quests = GuildQuest.all_quests()
    text = ''
    for quest in quests:
        date = datetime.datetime.fromtimestamp(quest.last_update).strftime('%Y-%m-%d %H:%S')
        text += '<code>{}</code> {} <code>{}</code> {}\n'.format(
            quest.guild.ljust(3, ' '), quest.castle, quest.percent.rjust(5, ' '), date)
    if text:
        bot.send_message(chat_id=mes.chat_id, text=text, parse_mode='HTML')
        return

    bot.send_message(chat_id=mes.chat_id, text='–ö–≤–µ—Å—Ç–æ–≤ –Ω–µ—Ç', parse_mode='HTML')


def del_quest(bot, update, guild=None):
    mes = update.message
    guild = mes.text.replace('/del_quest ', '').strip()
    if not check_access(mes.from_user.id):
        return
    if guild:
        quest = GuildQuest()
        quest.del_quest(guild)
        bot.send_message(chat_id=mes.chat_id, text="–ö–≤–µ—Å—Ç —É–¥–∞–ª–µ–Ω.")


def add_guild_quest(bot, update):
    logging.info("Parsing quest info!")
    mes = update.message
    s = mes.text
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    if player.guild is None:
        return

    forward_message_date = get_message_forward_time(mes)

    line = re.search(r'Progress: (.*)% (.)', s)
    percent = line.group(1)
    castle = line.group(2)
    guild = player.guild_tag

    text = None
    status, guild, castle, percent = GuildQuest.update_or_create_quest(
        {"guild": guild, "percent": percent, "castle": castle, "last_update": forward_message_date})
    if status == 'new':
        text = 'NEW quest {} {} {}'.format(guild, castle, percent)
    elif status == 'update':
        if percent >= 1.0:
            text = 'UPDATE quest {} {} +{}'.format(guild, castle, round(percent, 2))
    logging.info(f"Quest text: {text}")
    if text:
        bot.send_message(chat_id=MID_CHAT_ID, text=text, parse_mode='HTML')
        bot.send_message(chat_id=mes.chat_id, text="–î–∞–Ω–Ω—ã–µ –æ –∫–≤–µ—Å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
    else:
        logging.warning(f"Quest text is None: {[player.guild_tag]}")
