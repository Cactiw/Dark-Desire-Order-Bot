"""
–ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ –∂–µ—Ç–æ–Ω—ã
"""

from castle_files.libs.player import Player
from castle_files.libs.guild import Guild
from castle_files.libs.castle.location import Location

from castle_files.bin.mid import do_mailing
from castle_files.bin.trigger import global_triggers_in, get_message_type_and_data
from castle_files.bin.service_functions import check_access, get_time_remaining_to_battle, get_current_datetime

from castle_files.work_materials.globals import STATUSES_MODERATION_CHAT_ID, dispatcher, moscow_tz, cursor, job, \
    MID_CHAT_ID

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest, TelegramError

import logging
import traceback
import datetime
import re
import time
import json


REWARD_PRICE_RESET_WEEKS = 2


def reward_edit_castle_message(player, reward, *args, **kwargs):
    central_square = Location.get_location(0)
    format_values = central_square.special_info.get("enter_text_format_values")
    format_values[0] = reward
    central_square.update_location_to_database()
    pass


def reward_mailing(player, reward, *args, **kwargs):
    do_mailing(dispatcher.bot, reward)


def reward_global_trigger(player, reward, message, cost, *args, **kwargs):
    reward = reward.lower()
    if reward in global_triggers_in:
        dispatcher.bot.send_message(player.id, text="–¢–∞–∫–æ–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ñ–µ—Ç–æ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        player.reputation += cost
        player.update()
        return
    trigger_type, data = get_message_type_and_data(message.reply_to_message)
    request = "insert into triggers(text_in, type, data_out, chat_id, creator, date_created) VALUES (%s, %s, %s, %s, " \
              "%s, %s)"
    cursor.execute(request, (reward, trigger_type, data, 0, player.nickname,
                             datetime.datetime.now(tz=moscow_tz).replace(tzinfo=None)))
    global_triggers_in.append(reward.lower())
    dispatcher.bot.send_message(player.id, text="–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    pass


def reward_remove_global_trigger(player, reward, cost, *args, **kwargs):
    reward = reward.lower()
    if reward not in global_triggers_in:
        dispatcher.bot.send_message(player.id, text="–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–µ—Ç–æ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        player.reputation += cost
        player.update()
        return
    request = "delete from triggers where chat_id = 0 and text_in = %s"
    cursor.execute(request, (reward,))
    global_triggers_in.remove(reward)
    dispatcher.bot.send_message(player.id, text="–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    pass


def reward_g_def(player, reward, cost, *args, **kwargs):
    guild = Guild.get_guild(player.guild)
    if guild is None:
        dispatcher.bot.send_message(player.id, text="–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –≤ –≥–∏–ª—å–¥–∏–∏. "
                                                    "–ñ–µ—Ç–æ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        player.reputation += cost
        player.update()
        return
    do_mailing(dispatcher.bot, "üì£üì£üì£–í—ã —Å–ª—ã—à–∏—Ç–µ –∑–≤—É–∫–∏ —Ä–æ–≥–∞! –≠—Ç–æ {} –∑–∞–∑—ã–≤–∞–µ—Ç —Å—ã–Ω–æ–≤ –∏ –¥–æ—á–µ—Ä–µ–π –°–∫–∞–ª—ã –Ω–∞ –∑–∞—â–∏—Ç—É!\n"
                               "/g_def {}".format(guild.tag, guild.tag))
    dispatcher.bot.send_message(chat_id=STATUSES_MODERATION_CHAT_ID,
                                text="–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–Ω—è—Ç—å –∂–µ—Ç–æ–Ω—ã —Ç–µ–º, "
                                     "–∫–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç –≤ –¥–µ—Ñ–µ <b>{}</b> –≤ –±–ª–∏–∂–∞–π—à—É—é –±–∏—Ç–≤—É!".format(guild.tag),
                                parse_mode='HTML')
    job.run_once(when=get_time_remaining_to_battle() + datetime.timedelta(minutes=5),
                 callback=g_def_remind_after_battle, context={"tag": guild.tag})


def g_def_remind_after_battle(bot, job):
    bot.send_message(chat_id=MID_CHAT_ID,
                     text="–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–Ω—è—Ç—å –∂–µ—Ç–æ–Ω—ã —Ç–µ–º, "
                          "–∫—Ç–æ –Ω–µ –±—ã–ª –≤ –¥–µ—Ñ–µ <b>{}</b> –≤ –ø—Ä–æ—à–µ–¥—à—É—é –±–∏—Ç–≤—É!".format(job.context.get("tag")),
                     parse_mode='HTML')


def reward_request_pin(player, reward, cost, *args, **kwargs):
    pass


def reward_change_castle_chat_picture(player, reward, *args, **kwargs):
    pass


MUTED_MINUTES = 30
FORBID_MUTED_MINUTES = 30
muted_players = {}


def reward_read_only(player, reward, cost, *args, **kwargs):
    mute_player = Player.get_player(reward)
    if mute_player is None:
        player.reputation += cost
        player.update()
        dispatcher.bot.send_message(player.id, text="–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–µ—Ç–æ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        return
    if check_access(mute_player.id):
        # –•–æ—Ç—è—Ç –∑–∞–±–∞–Ω–∏—Ç—å —á–µ–ª–∞ –∏–∑ –º–∏–¥–∞
        muted_players.update({mute_player.id: time.time() + FORBID_MUTED_MINUTES * 60})
        dispatcher.bot.send_message(chat_id=mute_player.id,
                                    text="–¢—ã –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—à—å –∫–æ—à–µ–ª—å —Å –∂–µ—Ç–æ–Ω–∞–º–∏ —Å—Ç—Ä–∞–∂–Ω–∏–∫—É, —à–µ–ø—á–∞ –Ω–∞ —É—Ö–æ –∏–º—è –±–µ–¥–æ–ª–∞–≥–∏.\n"
                                         "-\"–®–û, –ü–†–Ø–ú –°–û–í–ï–¢–ù–ò–ö–ê –ö–û–†–û–õ–Ø, –ó–ê –¢–ê–ö–ò–ï-–¢–û –î–ï–ù–¨–ì–ò?!\"\n"
                                         "–°—Ç—Ä–∞–∂–Ω–∏–∫–∏ —Å–∫—Ä—É—á–∏–≤–∞—é—Ç —Ç–µ–±—è –∏ –∫–∏–¥–∞—é—Ç –≤ —Ç–µ–º–Ω–∏—Ü—É. –ü—è—Ç—å –º–∏–Ω—É—Ç–æ–∫ "
                                         "–ø–æ—Å–∏–¥–∏—à—å - –ø–æ—É–º–Ω–µ–µ—à—å.")
    else:
        muted_players.update({mute_player.id: time.time() + MUTED_MINUTES * 60})
        dispatcher.bot.send_message(chat_id=mute_player.id,
                                    text="\"–°—Ç—Ä–∞–∂—É –ø–æ–¥–∫—É–ø–∏–ª–∏!\" - –∫—Ä–∏—á–∏—à—å —Ç—ã, –ø–æ–∫–∞ —Ç–µ–±—è —É—Ç–∞—Å–∫–∏–≤–∞—é—Ç –≤ –æ–¥–∏–Ω–æ—á–∫—É "
                                         "–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–ª —á–∞—Å–∞.\n–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å, –≥–¥–µ –∏ –∫–æ–≥–¥–∞ —Ç—ã —É–º—É–¥—Ä–∏–ª—Å—è "
                                         "–Ω–∞–∂–∏—Ç—å —Å–µ–±–µ –≤—Ä–∞–≥–æ–≤, —á—Ç–æ –∞–∂ –∂–µ—Ç–æ–Ω–æ–≤ –Ω–µ –ø–æ–∂–∞–ª–µ–ª–∏, —á—Ç–æ–±—ã —Ç–µ–±–µ –Ω–∞—Å–æ–ª–∏—Ç—å.\n"
                                         "<em>30 –º–∏–Ω—É—Ç –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∏—á–µ–≥–æ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–∞—Ö —Å –±–æ—Ç–æ–º.</em>",
                                    parse_mode='HTML')


def delete_message(bot, update):
    try:
        bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    except TelegramError:
        pass


rewards = {"castle_message_change": {
    "price": 5000, "moderation": True, "text": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–º–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", "get": reward_edit_castle_message
    },
    "castle_mailing": {
        "price": 10000, "moderation": True, "text": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–º–∫—É:", "get": reward_mailing
    },
    "castle_global_trigger": {
        "price": 5000, "moderation": True, "text": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä:",
        "next": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º.", "get": reward_global_trigger
    },
    "castle_delete_global_trigger": {
        "price": 10000, "moderation": False, "text": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        "get": reward_remove_global_trigger
    },
    "castle_change_chat_picture": {
        "price": 5000, "moderation": True, "text": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ):",
        "next": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É.", "get": reward_change_castle_chat_picture
    },
    "castle_g_def": {
        "price": 5000, "moderation": False, "text": "–í—Å–µ–º –≥–∏–ª—å–¥–∏—è–º –∑–∞–º–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –æ –∑–∞—â–∏—Ç–µ –≤–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏.",
        "get": reward_g_def, "skip_enter_text": True
    },
    "castle_request_pin": {
        "price": 5000, "moderation": True, "text": "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–∏–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –±–∏—Ç–≤—É –∑–∞—Ä–∞–Ω–µ–µ.",
        "get": reward_request_pin, "skip_enter_text": True
    },
    "castle_ro": {
        "price": 5000, "moderation": False, "text": "–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞—Ç—å read only:",
        "get": reward_read_only
    },
}


def receive_reward(player, reward_name, reward, reward_text, cost, *args, **kwargs):
    create_reward_log(player, reward_name, cost, *args, **kwargs)
    reward["get"](player=player, reward=reward_text, cost=cost)


def create_reward_log(player, reward_name, cost, *args, **kwargs):
    request = "insert into castle_logs(player_id, action, result, date, additional_info) values (%s, %s, %s, %s, %s)"
    cursor.execute(request, (player.id, "reward_{}".format(reward_name), 1, get_current_datetime(),
                             json.dumps({"cost": cost})))
    

def smuggler(bot, update):
    mes = update.message
    bot.send_message(chat_id=mes.chat_id,
                     text="–í –¥–∞–ª—å–Ω–µ–º —Ç–µ–º–Ω–æ–º —É–≥–ª—É –≤—ã –≤–∏–¥–µ—Ç–µ –º—É–∂—á–∏–Ω—É. –°–≤–æ–µ–æ–±—Ä–∞–∑–Ω–∞—è —ç–º–±–ª–µ–º–∞ –ß–µ—Ä–Ω–æ–≥–æ –†—ã–Ω–∫–∞ –≤—ã–¥–∞–µ—Ç –≤ –Ω–µ–º "
                          "—Å–≤—è–∑–Ω–æ–≥–æ —Å –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ—è–º–∏ –ó–∞–º–∫–∞.\n"
                          "- \"–ù—É —Ç—ã –±–∞–∫–ª–∞–Ω—å, –µ—Å–ª–∏ —á–µ –ø–æ –¥–µ–ª—É –µ—Å—Ç—å, –∏–ª–∏ –≤–∞–ª–∏ –æ—Ç—Å—é–¥–∞ –Ω–∞, –ø–æ–∫–∞ –º–∞—Å–ª–∏–Ω—É –Ω–µ —Å–ª–æ–≤–∏–ª. "
                          "–ù–∞ –∑—ã—Ä—å, —Ç–æ–ª—å–∫–æ –±—ã—Ä–∞-–±—ã—Ä–∞, –∫–∞–±–∞–Ω—á–∏–∫–æ–º.\"\n\n"
                          "1) \"–£—Å–ª—É–≥–∏ –®–º–µ–Ω–∫—Å–∏\"- –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—É—é —É–ª–∏—á–Ω—É—é –∂–∏–≤–æ–ø–∏—Å—å.\n<em>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å "
                          "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫–æ—Ä–æ–ª—è.\n(–ë—É–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è).</em>\n<b>{}</b>\n"
                          "/castle_message_change\n\n"
                          "2) \"–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –≥–æ–ª—É–±—è—Ç–Ω—è\"- –ø–æ–¥–∫—É–ø–∏—Ç—å —Å—Ç—Ä–∞–∂—É —É –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π –≥–æ–ª—É–±—è—Ç–Ω–∏.\n"
                          "<em>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞–∑ –≤ –¥–µ–Ω—å.\n(–ë—É–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è).</em>\n<b>{}</b>\n"
                          "/castle_mailing\n\n"
                          "3) –†–æ–≥ –•–µ–ª—å–º–∞ –ú–æ–ª–æ—Ç–æ—Ä—É–∫–æ–≥–æ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø—Ä–æ—à–ª–æ–≥–æ, –¥–∞—é—â–∏–π –ø–æ–∏—Å—Ç–∏–Ω–µ –Ω–µ–æ–±—É–∑–¥–∞–Ω–Ω—É—é "
                          "—è—Ä–æ—Å—Ç—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º —Ä–æ–¥–Ω–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏. –û–≥—Ä–æ–º–Ω–∞—è –º–æ—â—å - —ç—Ç–æ –æ–≥—Ä–æ–º–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å!\n"
                          "<em>–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤—ã–π –¥–µ—Ñ –≥–∏–ª—å–¥–∏–∏.</em>\n<b>{}</b>\n/castle_g_def\n\n"
                          "4) –û—Ä–¥–µ–Ω –•—Ä–∞–º–∞ –õ–æ—Ç–æ—Å–∞ - –º–æ—â–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å —á–µ—Ä–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –¥—Ä–µ–≤–Ω–æ—Å—Ç–µ–π. "
                          "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –æ—Ä–¥–µ–Ω–∞ –∏–º–µ–µ—Ç –ø–æ–∏—Å—Ç–∏–Ω–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –¥–æ–≤–µ—Ä–∏—è –ö–æ—Ä–æ–ª—è –∏ –µ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤.\n"
                          "<b>–ù–æ –ø–æ–º–Ω–∏, –ø—Ä–∏ –º–∞–ª–µ–π—à–µ–º –Ω–∞–º–µ–∫–µ –Ω–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –¥–æ–≤–µ—Ä–∏—è –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–º - "
                          "–∫–∞—Ä–∞ –±—É–¥–µ—Ç —Å—É—Ä–æ–≤–æ–π.</b>\n<em>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏–Ω –∑–∞—Ä–∞–Ω–µ–µ.</em>\n<b>{}</b>\n"
                          "/castle_request_pin\n\n"
                          "5) –û–ø–µ—Ä–∞—Ü–∏—è \"–ö–æ–∑–µ–ª –≤ –æ–≥–æ—Ä–æ–¥–µ\" - –Ω–∞–π–º –±–∞–Ω–¥—ã –æ—Ç–ø–µ—Ç—ã—Ö –æ—Ç–º–æ—Ä–æ–∑–∫–æ–≤ –∏ –Ω–µ–≥–æ–¥—è–µ–≤ –¥–ª—è "
                          "–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è —Å–æ –≤–∑–ª–æ–º–æ–º.\n–ü—É—Å–∫–∞–π –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–∑–≤–∞—Ç—å"
                          "\"–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ–º –≤–µ–∫–∞\", –Ω–æ –µ–≥–æ —Ç–æ—á–Ω–æ –∑–∞–ø–æ–º–Ω—è—Ç –ø–æ —Ç–≤–æ–µ–º—É –ª–∏—á–Ω–æ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ç—Ä–∏–≥–≥–µ—Ä—É!\n"
                          "<em>–õ–∏—á–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–µ—Ä.\n(–ë—É–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è).</em>\n<b>{}</b>\n"
                          "/castle_global_trigger\n\n"
                          "6) –°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è \"–ü—Ä–∞—á–∫–∞ –≤ –ø—Ä–∞—á–µ—á–Ω–æ–π\". –õ—É—á—à–∏–µ —Å–ø–µ—Ü—ã —Ä–æ–∑—ã—Å–∫–∞ –∑–∞–π–º—É—Ç—Å—è –ø–æ–¥—á–∏—â–µ–Ω–∏–µ–º —Å–ª–µ–¥–æ–≤"
                          "–ø–æ—á—Ç–∏ \"–æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –≤–µ–∫–∞\".\n–ö—Ç–æ –Ω–∞—Å—Ä–∞–ª –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã? –ü–æ—á–∏—Å—Ç–∏–º!\n"
                          "<em>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–µ—Ä.</em>\n<b>{}</b>\n"
                          "/castle_delete_global_trigger\n\n"
                          "7) –ü–æ—Ä–æ—à–æ–∫ –∑–∞–±–≤–µ–Ω–∏—è.\n–§–µ—è –í–∏–Ω—å–µ—Ç–∞ –ö–∞–º–Ω–µ–º–æ—Ö –ª—é–±–µ–∑–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∞ –Ω–∞ —Ç—É–º–±–æ—á–∫–µ —Å–≤–æ–µ —Å–∞–º–æ–µ "
                          "–¥–µ–π—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ. –ó–∞–±—ã–ª –µ–µ —Å–≤–µ—Ç—è—â–∏–µ—Å—è –∫—Ä—ã–ª—å—è —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –Ω–∏–∫–æ–≥–¥–∞, –∞ –≤–æ—Ç —Å–º–µ–Ω–∏—Ç—å"
                          " –∑–Ω–∞–º–µ–Ω–∞ –Ω–∞ —Ñ–ª–∞–≥—à—Ç–æ–∫–∞—Ö –Ω–∞ –≥–ª–∞–∑–∞—Ö —É –≤—Å–µ—Ö - –≤–ø–æ–ª–Ω–µ.\n"
                          "<em>–í—ã–±–æ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏ –ª—é–±–æ–≥–æ —á–∞—Ç–∞ –∑–∞–º–∫–∞, –∫—Ä–æ–º–µ –æ–±—â–µ–≥–æ.\n(–ë—É–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è).</em>\n"
                          "<b>{}</b>\n/castle_change_chat_picture\n\n"
                          "8) –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –°—ã—Å–∫–Ω–æ–π –°–ª—É–∂–±—ã –ö–æ—Ä–æ–Ω—ã.\n"
                          "–ö–æ—Ä—É–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏–Ω–æ–≤–∫–Ω–∏–∫–∏ - –±–∏—á –ª—é–±–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞. –ù–æ —ç—Ç–æ –∏ –±–æ–ª—å—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. "
                          "–ü—Ä–∏–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä–∞–∂–µ –∞—Ä–µ—Å—Ç–æ–≤–∞—Ç—å –±–µ–¥–Ω—è–≥—É, –≤–µ–¥—å —Å —ç—Ç–æ–π –≥—Ä–∞–º–æ—Ç–æ–π —É –≤–∞—Å "
                          "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è!\n"
                          "<em>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ø–∞—è—Ç—å —Ä–∏–¥–æ–Ω–ª–∏ –Ω–∞ 30 –º–∏–Ω—É—Ç –ª—é–±–æ–º—É.</em>\n<b>{}</b>\n"
                          "/castle_ro\n\n".format(*list(map(lambda r: format_reward_price(r), list(rewards)))),
                     parse_mode='HTML')


def clear_reward_user_data(user_data):
    pop_list = ["reward_moderation", "reward_moderation_id", "reward", "reward_text", "reward_additional_id"]
    for pop_text in pop_list:
        if pop_text in user_data:
            user_data.pop(pop_text)


def request_reward_confirmation(bot, mes, reward, user_data):
    buttons = InlineKeyboardMarkup([[
        InlineKeyboardButton(text="‚úÖ–î–∞", callback_data="p_reward yes"),
        InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data="p_reward no")]])
    bot.send_message(chat_id=mes.chat_id, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n{}\n<em>{}</em>".format(reward["text"],
                                                                                      user_data["reward_text"]),
                     parse_mode='HTML', reply_markup=buttons)


def get_reward_price(reward_name: str) -> int:
    reward = rewards.get(reward_name)
    return reward["price"] * get_reward_combo(reward_name)


def get_reward_combo(reward_name: str) -> int:
    reward = rewards.get(reward_name)
    request = "select count(*) from castle_logs where action = %s and date > %s"
    cursor.execute(request, ("reward_{}".format(reward_name),
                             get_current_datetime() - datetime.timedelta(weeks=REWARD_PRICE_RESET_WEEKS)))
    count, *skip = cursor.fetchone()
    return count + 1


def format_reward_price(reward_name: str) -> str:
    reward = rewards.get(reward_name)
    combo = get_reward_combo(reward_name)
    return "{}üîò ({}üîò * {})".format(reward["price"] * combo, reward["price"], combo)



def request_get_reward(bot, update, user_data):
    mes = update.message
    reward_name = mes.text[1:]
    reward = rewards.get(reward_name)
    player = Player.get_player(mes.from_user.id)
    if player is None:
        return
    if reward is None:
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        return
    if player.reputation < get_reward_price(reward_name):
        bot.send_message(chat_id=mes.chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò –∂–µ—Ç–æ–Ω–æ–≤")
        return
    if reward.get("skip_enter_text"):
        # –ù–∏—á–µ–≥–æ –≤–≤–æ–¥—Ç—å –Ω–µ –Ω–∞–¥–æ, —Å—Ä–∞–∑—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∏–¥–∞—é
        user_data.update({"status": "tea_party", "reward": mes.text[1:], "reward_text": reward.get("text")})
        request_reward_confirmation(bot, mes, reward, user_data)
    else:
        # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
        user_data.update({"status": "requested_reward", "reward": mes.text[1:]})
        bot.send_message(chat_id=mes.chat_id, text=reward["text"])


def get_reward(bot, update, user_data):
    mes = update.message
    reward_text = mes.text
    reward = rewards.get(user_data.get("reward"))
    next_text = reward.get("next")
    if reward is None:
        bot.send_message(chat_id=mes.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –£–∂–µ —É–∫–∞–∑–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if 'additional' in user_data.get("status"):
        user_data.update({"status": "tea_party", "reward_additional_id": mes.message_id})
    elif next_text:
        user_data.update({"status": "requested_additional_reward", "reward_text": reward_text})
        bot.send_message(chat_id=mes.chat_id, text=next_text)
        return
    else:
        user_data.update({"status": "tea_party", "reward_text": reward_text})
    request_reward_confirmation(bot, mes, reward, user_data)


def answer_reward(bot, update, user_data):
    mes = update.callback_query.message
    player = Player.get_player(update.callback_query.from_user.id)
    if "yes" in update.callback_query.data:
        reward_name = user_data.get("reward")
        reward = rewards.get(reward_name)
        if reward is None:
            bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
            return
        if player.reputation < get_reward_price(reward_name):
            bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                    text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üîò –∂–µ—Ç–æ–Ω–æ–≤", show_alert=True)
            return
        player.reputation -= get_reward_price(reward_name)
        player.update()
        if reward.get("moderation"):
            if user_data.get("reward_moderation") is not None:
                bot.answerCallbackQuery(callback_query_id=update.callback_query.id,
                                        text="–û–¥–Ω–∞ –∏–∑ –Ω–∞–≥—Ä–∞–¥ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                                        show_alert=True)
                player.reputation += get_reward_price(reward_name)
                player.update()
                return
            add_mes_id = None
            mes_to_forward_id = user_data.get("reward_additional_id")
            if mes_to_forward_id:
                # –ö –Ω–∞–≥—Ä–∞–¥–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                add_mes = bot.forwardMessage(chat_id=STATUSES_MODERATION_CHAT_ID, from_chat_id=player.id,
                                             message_id=mes_to_forward_id)
                add_mes_id = add_mes.message_id
            bot.send_message(chat_id=STATUSES_MODERATION_CHAT_ID, parse_mode='HTML',
                             text="<b>{}</b>(@{}) –•–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É <b>{}</b>.\n<em>{}</em>\n"
                                  "–†–∞–∑—Ä–µ—à–∏—Ç—å?".format(player.nickname, player.username, user_data["reward"],
                                                      user_data["reward_text"]),
                             reply_to_message_id=add_mes_id,
                             reply_markup=InlineKeyboardMarkup([[
                                 InlineKeyboardButton(text="‚úÖ–î–∞",
                                                      callback_data="p_moderate_reward_{} yes".format(player.id)),
                                 InlineKeyboardButton(text="‚ùå–ù–µ—Ç",
                                                      callback_data="p_moderate_reward_{} no".format(player.id))]]))
            text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
            user_data.update({"reward_moderation": True})
        else:
            text = "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"
            try:
                receive_reward(player=player, reward_name=reward_name, reward=reward,
                               reward_text=user_data.get("reward_text"), cost=get_reward_price(reward_name))
            except Exception:
                logging.error(traceback.format_exc())
            clear_reward_user_data(user_data)
    else:
        text = "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ."
        clear_reward_user_data(user_data)
    try:
        bot.answerCallbackQuery(update.callback_query.id)
        bot.editMessageText(chat_id=mes.chat_id, message_id=mes.message_id, text=text)
    except BadRequest:
        bot.send_message(chat_id=mes.chat_id, text=text)


def moderate_reward(bot, update):
    mes = update.callback_query.message
    player_id = re.search("_(\\d+)", update.callback_query.data)
    if player_id is None:
        bot.answer_callback_query(callback_query_id=update.callback_query.id,
                                  text="–û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ",
                                  show_alert=True)
        return
    player_id = int(player_id.group(1))
    user_data = dispatcher.user_data.get(player_id)
    player = Player.get_player(player_id)
    if player is None:
        return
    yes = 'yes' in update.callback_query.data
    reward = user_data.get("reward")
    if reward is None:
        bot.answer_callback_query(callback_query_id=update.callback_query.id,
                                  text="–°—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
                                  show_alert=True)
        return
    reward_name = reward
    reward = rewards.get(reward)
    answer_text = "{} @<b>{}</b> –≤ <code>{}</code>" \
                  "".format("–û–¥–æ–±—Ä–µ–Ω–æ" if yes else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", update.callback_query.from_user.username,
                            datetime.datetime.now(tz=moscow_tz).strftime("%d/%m/%y %H:%M:%S"))
    try:
        bot.answerCallbackQuery(update.callback_query.id)
        bot.edit_message_text(chat_id=mes.chat_id, message_id=mes.message_id, text=mes.text + "\n" + answer_text,
                              parse_mode='HTML')
    except BadRequest:
        bot.send_message(chat_id=mes.chat_id, text=mes.text + "\n" + answer_text)

    if yes:
        try:
            receive_reward(player=player, reward_name=reward_name, reward=reward,
                           reward_text=user_data.get("reward_text"), cost=get_reward_price(reward_name))
        except Exception:
            logging.error(traceback.format_exc())
        bot.send_message(chat_id=player.id, text="–ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞.")
    else:
        player.reputation += get_reward_price(reward_name)
        player.update()
        bot.send_message(chat_id=player.id, text="–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\nüîò–ñ–µ—Ç–æ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    clear_reward_user_data(user_data)

