"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –∑–∞–º–∫—É
"""
from telegram.ext import BaseFilter
from castle_files.work_materials.filters.general_filters import filter_is_pm
from castle_files.work_materials.globals import dispatcher


class FilterBack(BaseFilter):
    def filter(self, message):
        return filter_is_pm(message) and message.text.startswith("‚Ü©Ô∏è –ù–∞–∑–∞–¥")


filter_back = FilterBack()


class FilterNotConstructed(BaseFilter):
    def filter(self, message):
        return filter_is_pm(message) and message.text.startswith("üèö –ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ")


filter_not_constructed = FilterNotConstructed()


# –î–∞–ª–µ–µ –∏–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–π –∑–∞–º–∫–∞
class FilterCentralSquare(BaseFilter):
    def filter(self, message):
        return filter_is_pm(message) and message.text.startswith("‚õ≤Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")


filter_central_square = FilterCentralSquare()


class FilterCastleGates(BaseFilter):
    def filter(self, message):
        return filter_is_pm(message) and message.text.startswith("‚õ© –í—Ä–∞—Ç–∞ –∑–∞–º–∫–∞")


filter_castle_gates = FilterCastleGates()


class FilterGuideSigns(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("‚ÜîÔ∏è –ü–æ–¥–æ–π—Ç–∏ –∫ —É–∫–∞–∑–∞—Ç–µ–ª—è–º") and \
            user_data.get("status") == 'central_square'


filter_guide_signs = FilterGuideSigns()


class FilterBarracks(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("üé™ –ö–∞–∑–∞—Ä–º–∞") and user_data.get("status") == 'central_square'


filter_barracks = FilterBarracks()


class FilterThroneRoom(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("üèõ –¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª") and user_data.get("status") == 'central_square'


filter_throne_room = FilterThroneRoom()
