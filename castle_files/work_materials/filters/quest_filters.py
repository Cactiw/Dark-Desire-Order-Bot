"""
–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —Å—Ç—Ä–æ–π–∫–µ
"""
from telegram.ext import BaseFilter
from castle_files.work_materials.filters.general_filters import filter_is_pm
from castle_files.work_materials.globals import dispatcher, king_id, SUPER_ADMIN_ID


class FilterSawmill(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("üå≤–õ–µ—Å–æ–ø–∏–ª–∫–∞") and \
            user_data.get("status") == 'castle_gates'


filter_sawmill = FilterSawmill()


class FilterQuarry(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("‚õ∞–ö–∞–º–µ–Ω–æ–ª–æ–º–Ω—è") and \
            user_data.get("status") == 'castle_gates'


filter_quarry = FilterQuarry()


class FilterTreasury(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("üí∞–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞") and \
            user_data.get("status") == 'throne_room'


filter_treasury = FilterTreasury()


class FilterConstruct(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        # –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏, –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ
        return filter_is_pm(message) and not message.text.startswith("‚Ü©Ô∏è –ù–∞–∑–∞–¥") and \
            user_data.get("status") == 'construction_plate'


filter_construct = FilterConstruct()


class FilterConstructionPlate(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("üèö –°—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∞") and \
            user_data.get("status") == 'central_square'


filter_construction_plate = FilterConstructionPlate()


class FilterKingCabinetConstruction(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("–ù–∞—á–∞—Ç—å —Å—Ç—Ä–æ–π–∫—É") and \
            user_data.get("status") == 'king_cabinet' and message.from_user.id in [king_id, SUPER_ADMIN_ID]


filter_king_cabinet_construction = FilterKingCabinetConstruction()


class FilterBeginConstruction(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text.startswith("/begin_construction_") and \
            user_data.get("status") == 'king_cabinet' and message.from_user.id in [king_id, SUPER_ADMIN_ID]


filter_begin_construction = FilterBeginConstruction()


class FilterTeaParty(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text in ["–ß–∞–π–Ω–∞—è –ª–∏–≥–∞"] and \
            user_data.get("status") == 'central_square'


filter_tea_party = FilterTeaParty()


class FilterTeaPartyQuest(BaseFilter):
    def filter(self, message):
        user_data = dispatcher.user_data.get(message.from_user.id)
        if user_data is None:
            return False
        return filter_is_pm(message) and message.text in ["–†–∞–∑–≤–µ–¥–∫–∞", "–†—ã—Ç—å –∫–æ—Ç–ª–æ–≤–∞–Ω"] and \
            user_data.get("status") == 'tea_party'


filter_tea_party_quest = FilterTeaPartyQuest()
